Aula05
01-Classes que representam nossas Views
Começando deste ponto? Você pode fazer o DOWNLOAD completo do projeto até aqui e continuar seus estudos.

Temos um modelo de Negociacao, outro de ListaNegociacoes, e temos uma controller que orquestra o acesso aos modelos de acordo com as ações do usuário. No entanto, ainda não conseguimos refletir o estado do modelo para a tela. A tabela ainda não exibe os dados cadastrados. Agora temos que atacar a View, do MVC, já temos o model e a controller. Para que possamos aplicar vários conceitos e conhecer novos recursos da linguagem JavaScript, minha proposta é que em cada parte da View que sincronizarmos com o modelo, não será feita no arquivo HTML. Em vez disso, criaremos a classe NegociacoesView dentro da pasta views que irá encapsular a apresentação que exibiremos para o usuário. É o arquivo NegociacoesView.js que terá as definições de como será a tabela. Começaremos com ela assim:

<table class="table table-hover table-bordered">
    <thead>
        <tr>
            <th>DATA</th>
            <th>QUANTIDADE</th>
            <th>VALOR</th>
            <th>VOLUME</th>
        </tr>
    </thead>

    <tbody>
    </tbody>

    <tfoot>
    </tfoot>
</table>
Como retiramos o trecho do código referente à tabela, no index.html, ela já não será mais exibida abaixo do formulário.

formulario sem tabela

Ao incluirmos uma negociação na lista, queremos que ela seja incluída e exibida na tabela. Para isto, em NegociacoesView.js, adicionaremos a classe NegociacaoView, e dentro dela, criaremos a função template() - que retornará uma template string. Depois, jogaremos o conteúdo da tabela dentro do return da função.

class NegociacoesView {

    template() {

        return `
        <table class="table table-hover table-bordered">
            <thead>
                <tr>
                    <th>DATA</th>
                    <th>QUANTIDADE</th>
                    <th>VALOR</th>
                    <th>VOLUME</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
     </table>
            `;
    }
}
Se o retorno não fosse uma template string, não poderíamos "identar" o código desta forma. Se fosse uma string, não poderíamos quebrar o código em linhas desta maneira. Ele não funcionaria. Nós teríamos que concatenar todas as linhas.

Em seguida, no NegociacaoController, adicionaremos a propriedade this._negociacao View:


class NegociacaoController {

    constructor() {

        let $ = document.querySelector.bind(document);
        this._inputData = $('#data');
        this._inputQuantidade = $('#quantidade');
        this._inputValor = $('#valor');
        this._listaNegociacoes = new ListaNegociacoes();
        this._negociacoesView = new NegociacoesView();
    }
//...
Precisaremos importar o arquivo também no index.html:

    <script src="js/app/models/Negociacao.js"></script>
    <script src="js/app/controllers/NegociacaoController.js"></script>
    <script src="js/app/helpers/DateHelper.js"></script>
    <script src="js/app/models/ListaNegociacoes.js"></script>
    <script src="js/app/views/NegociacoesView.js"></script>
    <script>
        let negociacaoController = new NegociacaoController();
</script>   
Após recarregarmos a página vamos digitar a seguinte linha no Console:

let NegociacoesView = new NegociacoesView()
Teremos uma instância de NegociacoesView. Se chamamos NegociacoesView.template(), recebemos uma mensagem de erro:

string no console

No Console, será exibida a string da tabela. Então, qual será nosso próximo objetivo? O template que está no NegociacoesView.js tem que aparecer no index.html, onde estava a marcação do HTML da tabela. Para isto, sinalizaremos o local em que o template será renderizado, adicionando a tag <div> e dentro, o id.

<div id="negociacoesView"></div>
Mas o NegociacoesView precisa saber que construiremos a tabela nesta <div>. Precisamos de alguma forma associar o elemento do DOM com a NegociacoesView. Por isso, vamos gerar um constructor() que recebe um elemento, responsável por receber o template:

class NegociacoesView {

    constructor(elemento) {

        this._elemento = elemento;
    }

    template() {

        return `<table class="table table-hover table-bordered">
                    <thead>
                        <tr>
                            <th>DATA</th>
                            <th>QUANTIDADE</th>
                            <th>VALOR</th>
                            <th>VOLUME</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
             </table>
            `;
    }
}
Em NegociacaoController, teremos que buscar o #negociacaoView:


class NegociacaoController {

    constructor() {

        let $ = document.querySelector.bind(document);
        this._inputData = $('#data');
        this._inputQuantidade = $('#quantidade');
        this._inputValor = $('#valor');
        this._listaNegociacoes = new ListaNegociacoes();
        this._negociacoesView = new NegociacoesView($('#negociacoesView'));

        this._negociacoesView.update();
    }
//...
Assim que a negociação for criada, pediremos para o negociacoesView fazer um update, então, a tabela aparecerá dentro da View. Depois, adicionaremos a função update dentro de NegociacoesView. Também vamos inserir o _ ao template, sinalizando que será uma função privada.

_template() {

    return `
    <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>DATA</th>
                        <th>QUANTIDADE</th>
                        <th>VALOR</th>
                        <th>VOLUME</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
         </table>
        `;
      }
O método update() que será criado, pegará o elemento do DOM e acessará a propriedade innerHTML. Ela será o retorno da função _template():

update() {

      this._elemento.innerHTML = this._template();
}
O innerHTML será responsável por converter as strings em elementos do DOM. Isto será inserido com filho da <div>.

Após as últimas alterações, quando recarregarmos a página no navegador, a tabela já será visualizada.

tabela na pagina

O problema é que ao chamarmos a função update(), a View que estamos renderizando no HTML, deveria refletir a lista de negociações. Se tivermos cinco negociações, todas deverão ser exibidas. Veremos mais adiante como atualizar a View com os dados do modelo.

Nosso objetivo era chamar na View a função update(), quando o modelo fosse atualizado, passando como parâmetro o model - que será enviado para o template da View. Depois, este será processado e usará como base os dados do model. A string final será colocada no atributo do elemento que a View associada no DOM. Toda string colocada na propriedade innerHTML será convertida em elementos do DOM.

Desta forma, conseguimos cadastrar as negociações, sendo atualizada no modelo e este notificará a View que deverá ser renderizada.
*******************
02-Construindo um template dinâmico com a função map
A função update() para atualização da View está funcionando e a tabela já pode ser visualizada abaixo do formulário. Porém, os dados do modelo ainda não são levados em consideração na construção dinâmica da tabela. Primeiramente, passaremos a ListaNegociacoes como parâmetro do método update(). Ou seja, quando o modelo for alterado, a lista deverá ser atualizada da tabela.

class NegociacaoController {

    constructor() {

        let $ = document.querySelector.bind(document);
        this._inputData = $('#data');
        this._inputQuantidade = $('#quantidade');
        this._inputValor = $('#valor');

        this._listaNegociacoes = new ListaNegociacoes();
        this._negociacoesView = new NegociacoesView($('#negociacoesView'));


    }
A ação não será realizada apenas quando a controller for carregada, mas também quando o adiciona() for chamado. Porque atualizamos a lista, assim que acabamos de adicionar uma nova negociação, temos que solicitar para View que esta se renderize com o novo modelo. Em NegociacoesView.js, faremos com que o método update() recebe o model.

update(model) {

    this._elemento.innerHTML = this._template(model);
}
Passamos o model como parâmetro do _template().

_template(model)

    return `
    <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>DATA</th>
                        <th>QUANTIDADE</th>
                        <th>VALOR</th>
                        <th>VOLUME</th>
                    </tr>
                </thead>

                <tbody>
                </tbody>
         </table>
        `;
      }
Dentro da tag <tbody>, adicionaremos tags <tr> com base em cada negociação do ListaNegociacoes. Para isto, usaremos uma expressão que conterá o map() - podemos usar, inclusive, uma arrow function.

<tbody>
    ${model.negociacoes.map(n => {

      })}
</tbody>
Se adicionarmos um console.log(n) e executarmos o código, a negociação será impressa no Console. Com o return n, será gerada uma nova lista, com base na modificação. O código ficaria assim:

<tbody>
    ${model.negociacoes.map(n => {
        console.log(n);
        return n;
      })}
</tbody>
Porém, se selecionarmos esta opção, teremos um problema: a expressão precisa nos devolver uma string, que seja enxertada no template. Seguiremos outro caminho: varreremos cada negociação e usaremos o return de outra template string.

<tbody>
    ${model.negociacoes.map(n => {

      return `
        <tr>
            <td>${DateHelper.dataParaTexto(n.data)}</td>
            <td>${n.quantidade}</td>
            <td>${n.valor}</td>
            <td>${n.volume}</td>
        </tr>
      `
      })}
</tbody>
Dentro da template string, adicionamos as tags <tr> e <td>, e usamos várias expressões para definirmos a exibição de data, quantidade, valor e volume. Quando o _template() for retornar a string, terá que processar o trecho do return primeiramente, e depois retornar a template string. Para cada negociação será criada uma lista - cada uma com as tags <tr> e os dados cadastrados. Estamos varrendo a lista e para um objeto Negociacao, estamos criando um array, mas o novo elemento será uma string com os dados. No entanto, por enquanto, o retorno será um array. Por isso, adicionaremos o join().

<tbody>
    ${model.negociacoes.map(n => {

      return `
        <tr>
            <td>${DateHelper.dataParaTexto(n.data)}</td>
            <td>${n.quantidade}</td>
            <td>${n.valor}</td>
            <td>${n.volume}</td>
        </tr>
      `
      }).join('')}
</tbody>
Ao utilizarmos o join(), usamos como critério de junção uma string em branco. Agora, teremos uma string com todos os dados do array concatenados. Vamos ver o que será exibido no navegador, após o preenchimento do formulário:

tabela com valores

Em seguida, adicionaremos uma nova negociação e os dados também serão exibidos na tabela.

tabela com duas negociações

Se completarmos os dados do formulário novamente, a tabela terá dados das três negociações. Observe que não manipulamos o DOM de maneira imperativa, em vez disso, fizemos de maneira declarativa. Nós declaramos o template, ele recebeu um modelo e com base nos dados do modelo, usamos a template string.

Conseguimos de maneira elegante, utilizando apenas recursos do JavaScript, fazer um template render. Porém, faltam algumas ações para que nossa tabela fique completa.
*******************
03-Enxugando o código
Faremos um pequeno ajuste que passou despercebido no vídeo anterior, antes de completarmos o código. Deixamos incompleto o fechamento da tag <tr>. Corrigiremos a falha dentro da <tbody>:

<tbody>
    ${model.negociacoes.map(n => {

      return `
        <tr>
            <td>${DateHelper.dataParaTexto(n.data)}</td>
            <td>${n.quantidade}</td>
            <td>${n.valor}</td>
            <td>${n.volume}</td>
        </tr>
      `
      })}
</tbody>
Felizmente, o navegador entendeu que tratava-se de um tag <tr>. Outro ajuste será na arrow function. Quando trabalhamos com um único retorno, não precisamos usar as chaves ({}). Também podemos remover o return. Veja como nosso código ficará mais enxuto:

<tbody>
    ${model.negociacoes.map(n => `

          <tr>
            <td>${DateHelper.dataParaTexto(n.data)}</td>
            <td>${n.quantidade}</td>
            <td>${n.valor}</td>
            <td>${n.volume}</td>
          </tr>

      `).join('')}
</tbody>
Facilitamos a leitura do código. Fizemos a declaração do template.

A seguir, trabalharemos com a tag <tfoot>, com a qual criaremos o rodapé.
*******************
04-Totalizando o volume em nosso Template
Vamos trabalhar com o rodapé... Atualmente, o método _template() está assim:

_template(model)

    return `
    table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>DATA</th>
                        <th>QUANTIDADE</th>
                        <th>VALOR</th>
                        <th>VOLUME</th>
                    </tr>
                </thead>

                <tbody>
                    ${model.negociacoes.map(n => `

                          <tr>
                            <td>${DateHelper.dataParaTexto(n.data)}</td>
                            <td>${n.quantidade}</td>
                            <td>${n.valor}</td>
                            <td>${n.volume}</td>
                          </tr>

                      `)join('')
                    }
                </tbody>

                <tfoot>
                </tfoot>

         </table>
        `;
      }
Para totalizarmos o volume, adicionaremos a tag <td> dentro da <tfoot>:

<tfoot>
    <td colspan="3"></td>
    <td>0</td>
</tfoot>
Observe que utilizamos a colspan com o valor 3, assim teremos três colunas. Usamos também uma <td> que tem o valor igual a 0. Mas se executarmos o código agora, ainda não será totalizado o volume.

volume 0

Para totalizar, poderíamos usar o forEach() e somar cada volume da negociação com uma variável.

<tfoot>
    <td colspan="3"></td>
    <td>${
        (function() {

            let total = 0;
            model.negociacoes.forEach(n => total+= n.volume);
            return total;
       })()
      }
    </td>
</tfoot>
Porém, dentro da expressão, precisamos retornar um valor. Só que quando usamos uma instrução, não podemos adicionar uma sequência de instruções. Seremos espertos e adicionaremos uma função dentro do $. Utilizaremos uma Immediately-invoked function expression (IIFE) ou a função imediata. Trata-se de um recurso usado na criação de escopo em JavaScript, que nos ajudará a colocar um bloco na expressão, sendo executado imediatamente. No caso, o $ receberá o total.

tabela com o volume total

Se testarmos no navegador, já será exibido o total do volume. Mas depois dessa "gambiarra", o código não ficou bonito. É possível fazer a ação de totalização de outra maneira funcional. Veremos mais adiante.
*******************
05-Totalizando o volume em nosso Template com a função reduce
Podemos fazer o código de maneira funcional, sem precisar usar a "gambiarra" feita na tag <tfoot> para exibirmos o total do volume:

<tfoot>
    <td colspan="3"></td>
    <td>
      ${
        (function() {

            let total = 0;
            model.negociacoes.forEach(n => total+= n.volume);
            return total;
      })()
     }
   </td>
</tfoot>
Vamos mostrar como conseguir o mesmo resultado usando o paradigma funcional e como o JavaScript array é bastante poderoso.

<tfoot>
    <td colspan="3"></td>
    <td>
        ${model.negociacoes.reduce(function(total, n) {
               return total + n.volume;
         }, 0.0)
        }
     </td>
</tfoot>
Observe que utilizamos a função reduce(), que irá processar o array e no fim, disponibiliza um único resultado. Primeiramente, não utilizaremos arrow functions. Optamos por passar uma função com as variáveis total e n(elementos da lista) - ambas receberam esses nomes, mas poderíamos ter definido outros. O return que criamos ainda não será suficiente. Qual será o valor inicial de total? Ele deve iniciar de 0 para conseguirmos somá-lo com volume. Por isso, o segundo parâmetro da função reduce() será a inicialização da variável total.

Basicamente, nós pedimos que negociacoes reduzisse. Em seguida, executamos a função para cada item da lista. A variável total começou com o valor igual a 0 e foi somado com o volume. Quando passamos para o segundo item da lista, este pega o valor anterior e o soma com o volume atual. No fim, a função retorna um valor único, que será o resultado de total.

Ao executarmos o código, veremos que ele funciona perfeitamente:

tabela com total 
Temos o valor correto do total. Agora vamos melhorar o código, utilizando a arrow function. No caso, como estamos trabalhando com dois parâmetros, não podemos remover os parênteses, mas podemos eliminar o function. Depois de adicionarmos a flecha, podemos remover as chaves {}. Poderemos também remover o return(). Com as alterações, a tag <tfoot> ficará assim:

<tfoot>
    <td colspan="3"></td>
    <td>
        ${ model.negociacoes.reduce((total, n) => total + n.volume, 0.0)}
    </td>
<tfoot>
A função reduce() executará uma arrow function, que recebe como parâmetro as variáveis total e n. Cada vez que varrermos os elementos do array, o total será o que tínhamos (inicializando pelo 0) somado ao volume. No fim, o reduce() retornará o resultado de total. É uma maneira funcional de lidarmos com problema para totalizar o volume. Como a função retornará um único valor, não foi necessário utilizar a IIFE para incluirmos várias instruções dentro do forEach().

Vamos executar o código. Após preenchermos duas vezes o formulário, teremos o valor correto do total de volume.

total volume final

Terminamos o template da tabela. A cada negociação incluída, a informação será exibida para o usuário com base nas informações da lista.
*******************
06-Resumindo
Vamos revisar o que vimos até aqui: implementamos um mecanismo de View dentro da aplicação. Ou seja, nós temos uma tabela na qual exibimos os dados da negociação. Mas em vez das marcações estarem no arquivo HTML, estas foram colocadas em uma classe nova chamada NegociacaoView.js.

Como o código da tabela ficou no JavaScript, a View precisou encontrar alguma forma de se renderizar e aparecer no HTML. Por isso, nós criamos uma <div> que leva o id e indicou o ponto no qual o arquivo da tabela será inserido. Para realizar tal ação, a View recebeu um modelo - com qual “tampamos” as lacunas do template.

Nós ainda criamos o método _template(), utilizando a template string. Vimos que podemos gerar expressões mais "rebuscadas" para montar tags <tr> dinamicamente. Usamos novamente a função map() para transformar o conteúdo de um array. Além disso, utilizamos a função join() para poder concatenar todos os itens do array que equivalem às tags <tr> da tabela.
*******************
07-Exercicio - Dominando o reduce
Você já deve ter ouvido falar em somatórios. O somatório de uma lista de números é a soma de todos os números daquela lista, como por exemplo:

let numeros = [1, 2, 3, 4]; // Somatório = 1 + 2 + 3 + 4 = 10
Um exemplo de função que nos retorne o somatório de um array de números poderia ser assim:

function somatorio(array) {

    var resultado = 0;
    for(let i = 0; i < array.length; i++){
        resultado = array[i] + resultado;
    }

    return resultado;
}
A mesma coisa usando forEach:

function somatorio(array) {
    let resultado = 0;
    array.forEach(item => resultado+= item);
    return resultado;
}
Existe um outro conceito matemático conhecido como produtório, que é análogo ao somatório, só que ao invés de somarmos os números , nós os multiplicamos. Por exemplo:

var numeros = [1, 2, 3, 4]; // Produtório = 1 * 2 * 3 * 4 = 24
Juntando este seu novo conhecimento matemático com o conhecimento de JavaScript adquirido neste capítulo, qual das funções abaixo nos retorna o produtório de um array de números corretamente, usando a função reduce?

Alternativa correta
let numeros = [1, 2, 3, 4];
let resultado = numeros.reduce((total, num) {
    return num * num;
}, 1);

Alternativa correta
let numeros = [1, 2, 3, 4];
let resultado = numeros.reduce((total, num) {
    return total * (total * num);
}, 1);

Alternativa correta
let numeros = [1, 2, 3, 4];
let resultado = numeros.reduce(function(total, num) {
    return total * num;
}, 1);

Isso aí! Essa é a opção correta!

Alternativa correta
let numeros = [1, 2, 3, 4];
let resultado = numeros.reduce(function(total, num) {
    return total * num;
}, 0);

A função reduce recebe dois parâmetros: uma função e um valor inicial. Na função interna ao reduce, o primeiro parâmetro é o valor da última iteração, que neste caso é o total. O segundo parâmetro é o valor da iteração atual, neste caso o novo número que queremos multiplicar.

O reduce executa sua função interna a cada iteração, então no nosso caso ele multiplica o valor anterior (total) pelo valor da iteração atual (num). Como o produtório é a multiplicação de uma sequência de números, no nosso caso o que está acontecendo é o seguinte:

Supondo o array:

var numeros = [1, 2, 3, 4];
O total se inicia com o valor 1*, *definido pelo segundo parâmetro da função reduce.

É feita a primeira iteração, pegando o primeiro valor do array (1) :

return total * num; // Leia-se: return 1 * 1 e coloque este valor em total.
Na segunda iteração, com o segundo valor do array (2):

return total * num; // Leia-se return 1 * 2 e coloque este valor em total, que agora vale 2;
Na terceira iteração, com o segundo valor do array (3):

return total * num; // Leia-se return 2 * 3 e coloque este valor em total, que agora vale 6;
Na segunda iteração, com o segundo valor do array (4):

return total * num; // Leia-se return 6 * 4 e coloque este valor em total, que agora vale 24;
E no final ele devolve para nós o valor 24 , que é o valor esperado do produtório!
*******************
08-Um pouco mais sobre o reduce
Vejamos um exemplo com reduce que soma todos os números de um array:

let numeros = [1,2,3,4];

let resultado = numeros.reduce((anterior, atual) => anterior + atual);
alert(resultado);
O resultado é 10. Contudo, muitas vezes queremos começar a operação considerando um valor de inicialização. Por exemplo, queremos realizar a mesma operação, só que dessa vez, queremos começar com o valor 5.

let resultado2 = numeros.reduce((anterior, atual) => anterior + atual, 5);
alert(resultado2);
Desta vez, o resultado final é 15!

Sendo assim, nada nos impede de fazer o primeiro reduce passando 0:

let numeros = [1,2,3,4];

let resultado = numeros.reduce((anterior, atual) => anterior + atual, 0);
alert(resultado);
O resultado será 10 também. Mas vale a pena passar o segundo parâmetro da função reduce já que neste caso quando o array for vazio, será lançada a exceção Reduce of empty array with no initial value".

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

É sempre bom aprender mais um novo detalhe, não é mesmo? :)
*******************
09-Reduce com arrow function
Demostre seu conhecimento de ES6 reescrevendo o exemplo da função reduce, do exercício anterior, utilizando uma arrow function no lugar da função tradicional.

Aqui está ela, para você não precisar voltar:

numeros.reduce(function(total,num) {
    return total * num;
}, 1);
VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Refatorando o reduce com uma arrow function, ele deve ficar assim:

numeros.reduce((total, num) => total * num , 1);
Mais uma vez podemos ver um exemplo aonde uma arrow function deixou o código mais elegante. Continue praticando seu uso que logo logo você ficará especialista nessa feature do ES6!
*******************
10-Imprimindo com map
Silvio, um funcionário da empresa Argentum, foi encarregado de desenvolver uma aplicação que é responsável por imprimir todos os dados dos funcionários da empresa. Ele queria economizar tempo e em vez de desenvolver todo um software para se comunicar com a impressora e gerar o relatório pedido, ele resolveu aproveitar-se da famosa opção de imprimir que todo browser tem. Sendo assim, basta ele gerar dinamicamente um HTML e imprimi-lo!

Este foi seu plano:

1- Criar um array com todos os funcionários da empresa. Se novos funcionários entrarem, basta adicioná-los no array.

2- Gerar uma tabela em HTML e preenchê-la com os dados desse array.

3- Utilizar o próprio browser para imprimir a página HTML gerada dinamicamente com os dados do relatório da tabela.

A tabela que ele montou tem esta cara:

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>Endereço</th>
                <th>Salário</th>
            </tr>
        </thead>

        <tbody>

            <!-- ELE ESTÁ COM DIFICULDADES AQUI -->
        <tbody>
    </table>

    <script>
        let funcionarios = [
            {
                "nome": "Douglas",
                "endereco" : "Rua da esquina, 123",
                "salario" : "4500"
            },
            {
                "nome": "Felipe",
                "endereco" : "Rua da virada, 456",
                "salario" : "5000"
            },
            {
                "nome": "Silvio",
                "endereco" : "Rua da aresta, 789",
                "salario" : "6000"
            }
        ];
    </script>
</body>
</html>
Seu único problema é que ele não está conseguindo mapear todos os elementos do array para uma tabela de verdade no HTML. Faça uso da função map, que vimos neste capítulo, para preencher a tabela do Silvio, lembrando que cada funcionário tem 3 atributos (nome, endereco e salario) e ele já tem acesso ao array funcionarios, que tem diversos objetos funcionario lá dentro.

VER OPINIÃO DO INSTRUTOR
Opinião do instrutor

Nosso primeiro passo é conseguir colocar os dados dos funcionários em <tr> e <td>'s para preencher a nossa tabela.

Vamos utilizar a função map, para transformar o array de objetos em um array de strings, com o HTML correto para preencher a tabela:

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>
    <table>
        <thead>
        <tr>
                    <th>Nome</th>
                    <th>Endereço</th>
                    <th>Salário</th>
            </tr>
        </thead>

        <tbody>

        </tbody>    
    </table>

    <script>

        let funcionarios = [
            {
                "nome": "Douglas",
                "endereco" : "Rua da esquina, 123",
                "salario" : "4500"
            },
            {
                "nome": "Felipe",
                "endereco" : "Rua da virada, 456",
                "salario" : "5000"
            },
            {
                "nome": "Silvio",
                "endereco" : "Rua da aresta, 789",
                "salario" : "6000"
            }
        ];

        // Antes tinhamos : funcionarios = [{objeto_func1},{objeto_func2},{objeto_func3}];

        let funcionariosEmHtml = funcionarios.map(f => `
                <tr>
                    <td>${f.nome}</td>
                    <td>${f.endereco}</td>
                    <td>${f.salario}</td>
                </tr>
            `);

        // Agora temos: funcionariosEmHtml = ["<tr><td>...</td></tr>","<tr><td>...</td></tr>","<tr><td>...</td></tr>"];

    </script>
</body>
</html>
Mas precisamos juntar estes 3 HTML's em um só, para poder preencher o <tbody> da tabela, assim vamos utilizar a função join('') que será :

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>
    <table>
        <thead>
        <tr>
                    <th>Nome</th>
                    <th>Endereço</th>
                    <th>Salário</th>
            </tr>
        </thead>

        <tbody>

        </tbody>    

    </table>

    <script>

        let funcionarios = [
            {
                "nome": "Douglas",
                "endereco" : "Rua da esquina, 123",
                "salario" : "4500"
            },
            {
                "nome": "Felipe",
                "endereco" : "Rua da virada, 456",
                "salario" : "5000"
            },
            {
                "nome": "Silvio",
                "endereco" : "Rua da aresta, 789",
                "salario" : "6000"
            }
        ];

        // Antes tinhamos : funcionarios = [{objeto_func1},{objeto_func2},{objeto_func3}];

        let funcionariosEmHtml = funcionarios.map(f => `
                <tr>
                    <td>${f.nome}</td>
                    <td>${f.endereco}</td>
                    <td>${f.salario}</td>
                </tr>
            `);

        // Agora temos: funcionariosEmHtml = ["<tr><td>...</td></tr>","<tr><td>...</td></tr>","<tr><td>...</td></tr>"];

        let htmlConcatenado = funcionariosEmHtml.join('');

        // Agora temos: htmlConcatenado = ["<tr><td>...</td></tr><tr><td>...</td></tr><tr><td>...</td></tr>"];            
    </script>
</body>
</html>
Conseguimos agora uma única string com todas as linhas que representam nosso funcionário!

Vamos selecionar o <tbody> e preencher seu conteúdo, utilizando a propriedade .innerHTML:

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>
    <table>
        <thead>
        <tr>
                    <th>Nome</th>
                    <th>Endereço</th>
                    <th>Salário</th>
            </tr>
        </thead>

        <tbody>

        </tbody>    

    </table>

    <script>

        let funcionarios = [
            {
                "nome": "Douglas",
                "endereco" : "Rua da esquina, 123",
                "salario" : "4500"
            },
            {
                "nome": "Felipe",
                "endereco" : "Rua da virada, 456",
                "salario" : "5000"
            },
            {
                "nome": "Silvio",
                "endereco" : "Rua da aresta, 789",
                "salario" : "6000"
            }
        ];

        // Antes tinhamos : funcionarios = [{objeto_func1},{objeto_func2},{objeto_func3}];

        let funcionariosEmHtml = funcionarios.map(f => `
                <tr>
                    <td>${f.nome}</td>
                    <td>${f.endereco}</td>
                    <td>${f.salario}</td>
                </tr>
            `);

        // Agora temos: funcionariosEmHtml = ["<tr><td>...</td></tr>","<tr><td>...</td></tr>","<tr><td>...</td></tr>"];

        let htmlConcatenado = funcionariosEmHtml.join('');

        // Agora temos: htmlConcatenado = ["<tr><td>...</td></tr><tr><td>...</td></tr><tr><td>...</td></tr>"];            

        let tabela =  document.querySelector("tbody");
        tabela.innerHTML = htmlConcatenado;

    </script>
</body>
</html>
Trabalho realizado! :)
*******************
11-Exercicio - Dominando o map
Qual das funções abaixo aproveita-se dos recursos da função map para obter arrays com os valores dobrados, com valores pela metade e com raiz quadrada de todos os números abaixo, mantendo a ordem apresentada:

let numeros = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121];
Alternativa correta
let dobro = numeros.map((num) {
    num * 2;
});
let metade = numeros.map((num) {
    num/2;
});
let raiz = numeros.map((num) {
    Math.sqrt(num);
});

Alternativa correta
let dobro = numeros.map(function(num) {
    return num * 2;
});
let metade = numeros.map(function(num) {
    return num/2;
});
let raiz = numeros.map(function(num) {
    return Math.sqrt(num);
});

Cada map recebe uma função como parâmetro, e em cada uma dessas funções, utilizamos um parâmetro que é o elemento de cada índice da array que deverá ser retornado em cada iteração.

Alternativa correta
let dobro = numeros.map(return num * 2);
let metade = numeros.map(return num/2);
let raiz = numeros.map(return Math.sqrt(num));

Alternativa correta
let dobro = numeros.map((num) {
    return num * 2;
});
let metade = numeros.map((num) {
    return num/2;
});
let raiz = numeros.map((num) {
    return Math.sqrt(num);
});
*******************
12-
*******************
13-
*******************
14-
*******************