Aula06
01-Classe Mensagem
Começando deste ponto? Você pode fazer o DOWNLOAD completo do projeto até aqui e continuar seus estudos.

Nossa aplicação já está funcionando, mas vamos melhorar a experiência do usuário. Quando adicionamos uma negociação, os dados são inseridos na tabela. Nosso objetivo será exibir uma mensagem para o usuário, na qual informaremos que a negociação foi incluída com sucesso. Para fazer isto, vamos criar um novo modelo que chamaremos de Mensagem.js. Nele, adicionaremos um texto e sempre que quisermos exibir uma mensagem, será instanciado um objeto da minha classe Mensagem. O texto que será exibido, ficará guardado nesta classe.

class Mensagem {

    constructor() {

      this._texto;
    }

    get texto() {

        return this._texto;

    }
}
Nós usamos a convenção do prefixo _ para manter o _texto privado. Usamos um get que terá um return this._texto.

Nós queremos também ser capazes de alterar o texto, faremos isto, adicionando o set texto(). Assim como temos a opção de usar o get, usaremos o set:

set texto(texto) {

    this._texto = texto;
}
Mas seria possível aceitar um intervenção como a variável let, como nas linhas abaixo:

let mensagem = new Mensagem();
mensagem.texto = 'x';
O valor dentro do mensagem.texto será enviado por debaixo dos panos para o método texto() e depois, será atribuído a mensagem. Porém, quando criamos uma mensagem nova, o valor deve estar com uma string em branco. Mas ainda é possível alterar o texto da mensagem em branco:

let mensagem = new Mensagem('xxxx');
mensagem.texto = 'nova mensagem';
Temos ainda a opção de já passar a mensagem no constructor():

class Mensagem {

    constructor(texto) {

        this._texto = texto;
    }

    get texto() {

        return this._texto;
    }

    set texto(texto) {

        this._texto = texto;
    }
}
Agora podemos usar a variável let e passaremos o texto dentro da Mensagem().

let mensagem = new Mensagem('Flávio Almeida');
console.log(mensagem.texto)
A mensagem Flávio Almeida poderá ser visualizada no Console, quando executarmos o código. Mas e nos casos em que não sabemos qual será a mensagem do objeto Mensagem()? Qual será o valor padrão do texto? Teremos que passar como parâmetro uma string vazia.


class Mensagem {

    constructor(texto) {

        this._texto = texto;
    }

    get texto() {

        return this._texto;
    }

    set texto(texto) {

        this._texto = texto;
    }
}

let mensagem = new Mensagem('');
Para resolver a questão, o ES6 permite atribuir um valor padrão para parâmetros do constructor() ou de funções do JS. Se não passarmos no construtor da Mensagem() um texto, ele adotará como padrão uma string em branco.

class Mensagem {

    constructor(texto='') {

        this._texto = texto;
    }
//...
Mas se abaixo, adicionamos um texto e Mensagem, ele entende que não poderá usar o valor padrão. Vamos testar o código.

Antes, importaremos o arquivo Mensagem.js em index.html.

<script src="js/app/models/Negociacao.js"></script>
<script src="js/app/controllers/NegociacaoController.js"></script>
<script src="js/app/helpers/DateHelper.js"></script>
<script src="js/app/models/ListaNegociacoes.js"></script>
<script src="js/app/views/NegociacoesView.js"></script>
<script src="js/app/models/Mensagem.js"></script>
<script>
    let negociacaoController = new NegociacaoCOntroller();
</script>
Em seguida, digitaremos as seguintes linhas no Console do navegador:

let mensagem = new Mensagem();
undefined
mensagem.texto
""
Ao imprimirmos o mensagem.texto, o retorno é uma string em branco. Se colocarmos como valor padrão do constructor() o texto Olá, o código fica assim:

class Mensagem {

    Constructor(texto='Olá') {

        this._texto = texto;
    }
//...
Ao recarregarmos o Console, o retorno será:

let mensagem = new Mensagem();
undefined
mensagem.texto
"Olá"
Ele imprimiu o valor padrão. Mas se adotarmos como padrão outro texto,Tchau!, por exemplo, o retorno será diferente.

let mensagem = new Mensagem();
undefined
mensagem.texto
"Tchau!"
Este é um recurso interessante, porque podemos definir um parâmetro default, tanto no construtor quanto no método.
*******************
02-Criando a classe MensagemView
Criamos o modelo de negociação, agora, criaremos o this._mensagem no NegociacaoController.js:

class NegociacaoController {

    constructor() {

        let $ = document.querySelector.bind(document);
        this._inputData = $('#data');
        this._inputQuantidade = $('#quantidade');
        this._inputValor = $('#valor');
        this._listaNegociacoes = new ListaNegociacoes();

        this._negociacoesView = new NegociacoesView($('#negociacoesView'));
        this._negociacoesView.update(this._listaNegociacoes);
        this._mensagem = new Mensagem();

    }

//...
Sabemos que quando for feita uma adição, queremos dizer que o this._mensagem.texto:

adiciona(event) {

    event.preventDefault();
    this._listaNegociacoes.adiciona(this._criaNegociacao());
    this._mensagem.texto = 'Negociacao adicionada com sucesso';
    this._negociacoesView.update(this._listaNegociacoes);  
    this._limpaFormulario();
}
Se preenchermos o formulário, os dados serão inseridos na tabela, mas a mensagem não, porque ainda não foi criada a View da mesma. Faremos isto a seguir.

Na pasta views, criaremos o arquivo MensagemView.js:

class MensagemView {

  constructor(elemento) {
        this._elemento = elemento;
  }

  _template(model) {

    return `<p class="alert alert-info">${model.texto}</p>`;
  }
}  
Usaremos o alert alert-info do bootstrap, seguido pela expressão ${model.texto}.

Logo abaixo, adicionaremos o método update() que receberá o model.

update(model) {

    this._elemento.innerHTML = this._template(model);
}
Vamos agora, importar a View no index.html:

<script src="js/app/models/Negociacao.js"></script>
<script src="js/app/controllers/NegociacaoController.js"></script>
<script src="js/app/helpers/DateHelper.js"></script>
<script src="js/app/models/ListaNegociacoes.js"></script>
<script src="js/app/views/NegociacoesView.js"></script>
<script src="js/app/models/Mensagem.js"></script>
<script src="js/app/views/MensagemView.js"></script>
<script>
    let negociacaoController = new NegociacaoController();
</script>
No NegociacoesController.js, colocaremos a View assim que a página for recarregada:

class NegociacaoController {

    constructor() {

        let $ = document.querySelector.bind(document);
        this._inputData = $('#data');
        this._inputQuantidade = $('#quantidade');
        this._inputValor = $('#valor');
        this._listaNegociacoes = new ListaNegociacoes();

        this._negociacoesView = new NegociacoesView($('#negociacoesView'));
        this._negociacoesView.update(this._listaNegociacoes);

        this._mensagem = new Mensagem();
        this._mensagemView = new MensagemView();

    }

//...
O MensagemView recebeu onde queremos incluir a mensagem no HTML. De volta ao index.html, vamos colocar a mensagem antes da tag <form>:

<body class="container">

    <h1 class="text-center">Negociações</h1>

    <div id="mensagemView"></div>

    <form class="form" onsubmit="negociacaoController.adiciona(event)">

<!-- ... -->
Depois, precisaremos pegar o elemento do DOM no NegociacaoController.js, adicionando o $.

this._mensagem = new Mensagem();
this._mensagemView = new MensagemView($('#mensagemView'));
this._mensagemView.update(this._mensagem);
Usamos o update e dentro passamos o this._mensagem. Vamos incluir o this._negociacoesView também no método adiciona():

adiciona(event) {

    event.preventDefault();
    this._listaNegociacoes.adiciona(this._criaNegociacao());
    this._negociacoesView.update(this._listaNegociacoes);

    this._mensagem.texto = 'Negociacao adicionada com sucesso';
    this._mensagemView.update(this._mensagem);  

    this._limpaFormulario();
}
Vamos ver se algo já é exibido no navegador.

barra azul

Agora aparece um barra com um fundo azul, isto é uma mensagem do bootstrap vazia. A mensagem não deveria estar sendo exibida, considerando que a nossa string está em branco. Vamos testar cadastrar uma nova negociação no formulário.

cadastro com sucesso

Conseguimos adicionar os dados a tabela e a mensagem de sucesso apareceu corretamente. Veja que conseguimos usar o mesmo mecanismo de criação da View para lidar com as mensagens do sistema. As ações de importar e apagar negociações podem ser associadas com a atualização de mensagem. Quando chamarmos o updatena View, passando o model, este atualizará a tela. Mas queremos retirar o parágrafo com o fundo azul que aparece acima do formulário. Resolveremos isso em MensagemView.js.

Na classe _template, faremos um if ternário:

_template(model) {

    return model.texto ? `<p class="alert alert-info">${model.texto}</p>` : '<p></p>';
}   
Nós vamos retornar um parágrafo sem a classe. Em JavaScript, uma string sem conteúdo é avaliada como falso. Podemos testar se o modelo.texto é uma string em branco, 0 ou null, nesses casos, a resposta é falso. Mas se tiver texto, vai dar verdadeiro e o retorno será o template. Caso contrário, o retorno será um parágrafo sem a classe alert-info e, consequentemente, sem a tarja azul. Se inspecionamos o elemento do DOM no Console, vemos que o paragrafo está vazio:

<div id="mensagemView">
    <p></p>
</div>
Não aparece a classe do bootstrap. Mas se cadastramos a negociação no formulário, a mensagem aparecerá corretamente. Conseguimos resolver a parte das mensagens para o usuário. Mas será que conseguimos melhorar ainda mais o código?
*******************
03-Herança e reutilização de código
Temos duas Views criadas: MensagemView e NegociacoesView. Se observarmos, ambas posuem um construtor que recebe um elemento, além de possuir a propriedade elemento. As duas têm os métodos _template e update, que são bem semelhantes. A diferença está na forma em que o método _template foi implementado e o seu retorno. E se aumentarmos o número de Views, teremos que ter mais updates. Atualmente, o método update do NegociacoesView está assim:

update(model) {

    this._elemento.innerHTML = this._template(model);
}
Se nos enganamos e escrevermos innerHtml, com as letras de HTMLem caixa baixa, teremos problemas na execução do código. Para evitarmos a repetição, vamos colocar o que as classes têm em comum, apenas em uma, a nova classe receberá o nome de View.

class View {

    constructor(elemento) {

          this._elemento = elemento;
    }

    update(model) {

        this._elemento.innerHTML = this._template(model);
    }
}
A classe View recebeu tudo o que as Views tinham em comum: um constructor(elemento) - que guardará internamente um elemento - e update(). Lembrando que o método _template possui algumas diferenças nas classe. Depois, removeremos os métodos constructor() e update().

Em seguida, para evitarmos duplicar o código, faremos com que MensagemView herde todas as características de View. Como em JavaScript trabalhamos com o conceito da orientação a objetos que é herança? Podemos dizer que a MensagemView é uma View:

class MensagemView extends View {

  _template(model) {

      return model.texto ? `<p class="alert alert-info">${model.texto}</p>` : '<p></p>';
  }
}
Faremos o mesmo com NegociacoesView:

class NegociacoesView extends View {

    _template(model) {

      return `
      <table class="table table-hover table-bordered">
          <thead>
              <tr>
                  <th>DATA</th>
                  <th>QUANTIDADE</th>
                  <th>VALOR</th>
                  <th>VOLUME</th>
              </tr>
          </thead>
//...
Vamos carregar a View no index.html.

<script src="js/app/models/Negociacao.js"></script>
<script src="js/app/controllers/NegociacaoController.js"></script>
<script src="js/app/helpers/DateHelper.js"></script>
<script src="js/app/models/ListaNegociacoes.js"></script>
<script src="js/app/views/View.js"></script>
<script src="js/app/views/NegociacoesView.js"></script>
<script src="js/app/models/Mensagem.js"></script>
<script src="js/app/views/MensagemView.js"></script>
<script>
    let negociacaoController = new NegociacaoController();
</script>
Observe que ao carregarmos os scripts, devemos posicionar a View antes das outras Views dependentes. Se a View for carregada por última, no navegador veremos uma mensagem de erro que nos dirá: View is not defined, porque na definição da classe estamos usando herança nas duas Views.

Se digitarmos a seguinte linha no Console...

let v = new NegociacoesView()
Tudo funcionará corretamente e o arquivo NegociacoesView herdará de View o método update(). Apesar de termos removido o método, ele está sendo invocado. Mas quando carregamos NegociacoesView e MensagemView, precisamos ter um constructor() que recebe o elemento. O construtor chamará o super() - fazendo referência ao super class, a classe pai. Com as alterações, o NegociacoesView ficará assim:

class NegociacoesView extends View {

    constructor(elemento) {
        super(elemento);
    }
//...
E o MensagemView ficará da seguinte maneira:

class MensagemView extends View {

    constructor(elemento) {
        super(elemento);
    }
//...
Se cadastrarmos uma nova negociação, veremos que está tudo funcionando.

formulario funcionando corretamente

Mas, só encontraremos o método update na View. Para que as duas Views pudessem herdar da classe View, seria necessário adicionarmos no NegociacoesView o MensagemView e o extends.

Evitamos a duplicação do código, mas será que existe alguma outra falha? Veremos mais adiante.
*******************
04-Construtor vs super
Se definimos que "para a criação de uma View, esta deverá herdar de View", pode ocorrer que o desenvolvedor esqueça de implementar o método _template. O arquivo MensagemView ficaria assim:

class MensagemView extends View {

    constructor(elemento) {
        super(elemento);
    }
}
Se executarmos o código no navegador, teremos um erro.

erro no Console

O erro ocorrerá porque o método update depende do _template() para funcionar. E na classe View, não podemos definir a implementação do método, considerando que este sofre variações nas classes filhas, logo, estas serão as responsáveis por definir o _template(). Por isso, vamos encontrar uma forma de lembrar ao desenvolvedor que ele deve usar o método _template().

No arquivo View.js, vamos adicionar o _template(), que lançará um new Error.

_template() {
    throw new Error('O método template deve ser implementado');
}
A mensagem informará que o método template deve ser implementado. Mas se NegociacoesView possui um método definido com o nome _template() - também utilizado na classe pai - a classe filha irá sobrescrevê-lo. Isto significa que o método válido é o _template() de NegociacoesView. O mesmo ocorrerá com MensagemView. Desta forma, a mensagem de erro só será adicionada caso o desenvolvedor se esqueça de implementar o método nas Views.

mensagem template deve ser implementado

Como não adicionamos o _template() no MensagemView.js, fomos avisados no Console.

Na linguagem JavaScript, não existem classes abstratas e, por isso, não podemos obrigar as classes filhas a implementarem o _template(). Explicado isto, vamos adicionar novamente o método _template() no MensagemView.js:

class MensagemView extends View {

    constructor(elemento) {
        super(elemento);
    }

    _template(model) {

        return model.texto ? `<p class="alert alert-info">${model.texto}</p>` : '<p></p>';
    }
}
A mensagem de erro não será exibida quando recarregarmos a página no navegador. Para finalizar, faremos um pequeno ajuste. Como foi convencionado, ao usarmos o prefixo _ no nome do método _template(), mesmo as classes filhas não poderiam chamar o método. Apenas a classe pai deveria ter este acesso. Por isso, vamos remover o _ de todas as referências ao método _template.

O trecho referente em View.js ficará assim:

template(model) {

    return model.texto ? `<p class="alert alert-info">${model.texto}</p>` : '<p></p>';
}

update(model) {
    this._elemento.innerHTML = this.template(model);
}
Em NegociacoesView, o método template() ficará assim:

template(model) {

      return `
      <table class="table table-hover table-bordered">
                  <thead>
                      <tr>
                          <th>DATA</th>
                          <th>QUANTIDADE</th>
                          <th>VALOR</th>
                          <th>VOLUME</th>
                      </tr>
                  </thead>
//...
E por último, em MensagemView:

template(model) {

    return model.texto ? `<p class="alert alert-info">${model.texto}</p>` : '<p></p>';
}
Se tivéssemos mantido o prefixo _, o código funcionaria corretamente. Mas como se trata de uma indicação de private, por convenção, as classes filhas não poderiam sobescrever o método. Com isto, organizamos o nosso código baseados em herança.
*******************
05-Resumindo
Vimos que o código das Views NegociacoesView e MensagemView tinham trechos em comum. Nós isolamos tais partes dentro de uma classe, juntamente com o construtor que recebeu o elemento e o método update(). Depois, fizemos com que as duas Views herdassem da classe View, assim, não repetimos o código em comum. Mas coube às classes filhas implementarem o método template().

Criamos ainda uma "armadilha" para evitar a possibilidade de que o desenvolvedor se esquecesse de incluir o método, incluindo uma mensagem de erro no Console. Lembrando que um método da classe filha sobrescreve métodos da classe pai.

Depois, adicionamos o constructor() nas classes filhas com o super, que passava o parâmetro para a classe pai. Fizemos também um pequeno ajuste, retirando o prefixo _ do método template(), que anteriormente era privado. A alteração foi necessária porque os métodos template() de NegociacoesView eMensagemView precisavam sobrescrever o método em View.

Aguardamos você na segunda parte do curso.

Você pode continuar os seus estudos com o curso de JavaScript Avançado II da Alura.
*******************
06-Sabendo ainda mais sobre herança
Durante esta aula, aprendemos a utilizar herança através do uso da palavra chave extends. Contudo, este instrutor que preza sempre por um código menos verboso e enxuto deixou passar um detalhe, que pode enxugar ainda mais nosso código. Primeiro, vamos lembrar o uso de extends:

class Funcionario {

    constructor(nome) {
        this._nome = nome;
    }

    get nome() {
        return this._nome;
    }

    set nome(nome) {
        this._nome = nome;
    } 
}

class Secretaria extends Funcionario {

    constructor(nome) {
        super(nome);
    }

    atenderTelefone() {
        console.log(`${this._nome} atendendo telefone` );
    }
}
Veja que no construtor de Secretaria eu recebo o nome da secretária pelo construtor e passamos esse parâmetro para a classe pai. Contudo, essa solução neste cenário é um tanto verbosa. Qual motivo? Por padrão, quando uma classe herda outra, ela também herda seu construtor. Dessa maneira, podemos reescrever a classe Secretaria como:

class Secretaria extends Funcionario {

    // não precisei adicionar constructor e nem chamar super!

    atendeTelefone() {
        console.log(`${this._nome} atendendo telefone` );
    }
}
Criando uma instância de Secretaria:

let secretaria = new Secretaria('Suzete');
O JavaScript automaticamente considera o construtor da classe pai Funcionario, que recebe um parâmetro.

Contudo, apareceu um novo requisito na classe Secretaria. Toda secretária deve ter, além de um nome, um outro funcionário ao qual está subordinada:

class Secretaria extends Funcionario {

    constructor(nome, funcionario) {
        this._nome = nome;
        this._funcionario = funcionario;
    }

    atendeTelefone() {
        console.log(`${this._nome} atendendo telefone` );
    }

    get funcionario() {
        return this._funcionario;
    }
}
No exemplo anterior, foi necessário adicionar o construtor porque a propriedade _funcionario só existe em Secretaria. O problema é que nosso código não funciona! Se tentarmos fazer:

let secretaria = new Secretaria('Suzete', new Funcionario('Barney'));
Recebemos o erro:

Uncaught ReferenceError: this is not defined
Quando temos um construtor na classe filha que recebe uma quantidade de parâmetros diferentes do construtor da classe pai, para que o this seja inicializado com um valor, precisamos chamar o construtor da classe pai, passando os parâmetros que ela precisa. Corrigindo nosso código:

class Secretaria extends Funcionario {

    constructor(nome, funcionario) {
        super(nome); // cuidado, tem que ser a primeira instrução!
        this._funcionario = funcionario;
    }

    atenderTelefone() {
        console.log(`${this._nome} atendendo telefone` );
    }
}
A palavra super, como já vimos, nos dá acesso à superclasse, ou seja, a classe que foi herdada. Em nosso caso, estamos passando para o construtor de Funcionario o nome recebido pelo construtor de Secretaria. O segundo parâmetro, funcionario, só diz respeito à secretária, por isso a propriedade foi adicionada em this._funcionario.

Mas atenção! A chamada do construtor da classe pai deve ser a primeira instrução no construtor da classe filha. Se por acaso tivéssemos o construtor assim:

constructor(nome, funcionario) {
    this._funcionario = funcionario; // this ainda não foi inicializado
    super(nome); 
}
Teremos um erro, porque estamos tentando acessar um this que ainda não foi inicializado.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Não havia problema nenhum com o código que fiz com vocês durante o vídeo, porém era um código desnecessário naquele contexto. Aliás, isso acabou expandindo ainda mais o nosso conhecimento sobre classes com ES2015!
*******************
07-
*******************
08-
*******************
09-
*******************
10-
*******************
11-
*******************
12-
*******************
