Aula2-04
01-Serviços disponíveis
Você pode fazer o download completo do projeto até aqui e continuar seus estudos.

Nós aplicamos diversos recursos da linguagem JavaScript, padrões de projetos e outros... Mas para a aplicação ficar completa, além de incluir negociações, queremos poder importar negociações de serviços na web. Alguns bancos oferecem a possibilidade de obter as negociações da semana atual e da anterior. Nós já disponibilizamos no projeto uma pasta chamada server. No primeiro exercício obrigatório do curso, você encontrará toda a infraestrutura que você precisa para subir o servidor.

Com a infraestrutura instalada, entraremos na pasta Desktop. Para isto, você deve ter um conhecimento básico sobre o uso do Terminal para entrar nesta pasta.

No curso, usaremos o Terminal do Mac. Mas se você é usuário de Windows e não domina o prompt de comando, nossa recomendação é que faça o curso Windows: Introdução ao Prompt. Neste ponto do curso, assumiremos que você já sabe interagir com seu Terminal.

Para levantar o servidor, abriremos nosso Terminal e depois, entraremos na pasta aluraframe/server. É a primeira vez que interagiremos com essa pasta, mas basicamente, você só precisa rodar o comando no seu terminal:

> npm start
Caso esse comando de erro use esse:

> node server.js
Isto fará com que um servidor rode e seja acessível por meio do endereço http://localhost:3000. Acesse esse endereço e automaticamente a página index.html será carregada. Se preferir, pode digitar http://localhost:3000/index.html.

A única mudança até agora é não acessar mais index.html do sistema de arquivos da plataforma, mas por intermédio do servidor. Certifique-se que o servidor esteja funcionando antes de continuar. O nosso servidor além de servir o index.html, possui também alguns serviços.

Geralmente, quem publica serviços na web disponibiliza uma URL de acesso. O nosso servidor publicará três:

negociacoes/semana
negociacoes/anterior
negociacoes/retrasada
Ao acessarmos o endereço http://localhost:3000/negociacoes/semana, sairemos da página index.html e, na tela, será exibida uma estrutura de dados no formato JSON (JavaScript Object Notation):

dados no formato texto

No entanto, não queremos exibir o arquivo JSON na tela e buscar os dados por meio de URL. Nosso objetivo é que ao clicarmos no botão Importar Negociações, seja feita a busca dos dados usando JavaScript e depois, os dados sejam inseridos na tabela de negociações. Desta forma, a tabela será automaticamente atualizada.

Nós temos todo mecanismo de Data binding, então, basta incluirmos os dados na tabela. A seguir, nós iremos relembrar como acessamos endereços na Web por meio do JavaSript, usando AJAX. Faremos uma revisão sobre o assunto e assim, entender o problema que desejamos resolver e qual recurso avançado pode nos ajudar em programação assíncrona .

O foco do curso é sobre como consumimos os dados publicados pelos servidores usando o JavaScript. Se você deseja aprender como servidores são criados e como eles disponibilizam esse tipo de dados, nossa sugestão é que você faça o curso de MEAN.
***********************
02-Requisições Ajax com o objeto XMLHttpRequest
Nosso objetivo é que ao clicarmos em "Importar Negociações", seja chamada uma ação na controller. Buscaremos o trecho referente no código do index.html.

<div class="text-center">
    <button class="btn btn-primary text-center" type="button">
        Importar Negociações
    </button>
    <button class="btn btn-primary text-center" type="button">
        Apagar
    </button>
</div>
Dentro da tag <button>, vamos adicionar o onclick.

<div class="text-center">
    <button onclick="negociacaoController.importaNegociacoes()" class="btn btn-primary text-center" type="button">
        Importar Negociações
    </button>
    <button class="btn btn-primary text-center" type="button">
        Apagar
    </button>
</div>
Nós chamamos o importaNegociacoes(), que será adicionado no NegociacaoController.js, logo abaixo do método adiciona().

importaNegociacoes() {

    alert('Importando negociações');
}
Desta forma, poderemos ver se tudo está funcionando bem. Se recarregarmos a página no navegador e depois, clicarmos em "Importar Negociações", o alert será exibido.

alert no navegador

Agora, realizaremos requisições assíncronas para o servidor usando o objeto especial existente no JavaScript. Substituiremos o alert pela variável xhr.

importaNegociacoes() {
    let xhr = new XMLHttpRequest();
}
A variável é uma instância de new XMLHttpRequest(). É comum vermos desenvolvedores realizarem o AJAX utilizando apenas jQuery, mas nós faremos manualmente. Pediremos para xhr abrir um endereço e especificaremos qual método será utilizado:

importaNegociacoes() {
    let xhr = new XMLHttpRequest();
    xhr.open('GET', 'negociacoes/semana');
}
O método open() recebeu dois parâmetros: o primeiro especifica o tipo de requisição a ser realizada(GET), o segundo é o endereço (negociacoes/semana). Se trabalhássemos com outro endereço do serviço na Web, seria necessário colocar o endereço completo. Como estamos trabalhando localmente, só adicionamos negociacoes/semana.

Mas até aqui, a requisição não será executada. Para que a ação seja executada, usaremos o método send().

importaNegociacoes() {
    let xhr = new XMLHttpRequest();

    /* configurações */
    xhr.open('GET', 'negociacoes/semana');

    /* executa */
    xhr.send();
}
A requisição ainda não está pronta. Será preciso fazer várias configuração antes de realizar o envio. É o que faremos a seguir: primeiramente, precisamos entender que toda requisição AJAX passa por estados - um deles nos dará os dados retornados do servidor. Por isso, precisamos interagir com esses estados e especificar que adicionaremos os dados de um deles no nosso model. O xhr tem a propriedade onreadystatechange, depois, passaremos uma arrow funtion que será chamada sempre que o estado do xhr for modificado.

Então, quais são os estados possíveis de um requisição AJAX? Listaremos abaixo os estados:

0: requisição ainda não iniciada

1: conexão com o servidor estabelecida

2: requisição recebida

3: processando requisição

4: requisição está concluída e a resposta está pronta

O estado 4 é o que mais nos interessa, porque é nele que temos acesso à resposta enviada pelo servidor. Precisamos encontrar um forma de descobrir em qual estado estamos quando o onreadystatechange é chamado. Para isto, adicionaremos um if:

importaNegociacoes() {

    let xhr = new XMLHttpRequest();
    xhr.open('GET', 'negociacoes/semana');
    xhr.onreadystatechange = () => {
        if(xhr.readyState == 4) {

        }
    };
    xhr.send();
}
Se o estado for igual a 4, buscaremos os dados do servidor. Este é o estado que a requisição está concluída e a resposta está pronta, mas não podemos confiar no mesmo, porque pode ocorrer algum erro no servidor e ainda assim, a resposta será válida. É comum o servidor lidar com estados da requisição. Então, só teremos certeza de que os dados chegaram se o xhr.status for igual a 200 (status code genérico).

if(xhr.status == 200) {
}
Se fosse um status de erro, poderíamos colocar 400 ou 500... Usaremos os dois ifs para nos blindarmos de qualquer tipo de problema.

Com as modificações, o nosso código ficará assim:

importaNegociacoes() {

    let xhr = new XMLHttpRequest();
    xhr.open('GET', 'negociacoes/semana');
    xhr.onreadystatechange = () => {
        if(xhr.readyState == 4) {
          if(xhr.status == 200) {
          }
        }
    };
    xhr.send();
}
A seguir, faremos um teste, adicionando o else e o console.log.

importaNegociacoes() {

    let xhr = new XMLHttpRequest();
    xhr.open('GET', 'negociacoes/semana');
    xhr.onreadystatechange = () => {
        if(xhr.readyState == 4) {
            if(xhr.status == 200) {
                console.log('Obtendo as negociações do servidor.')
            } else {
                console.log('Não foi possível obter as negociações do servidor.')
            }
        }
    }
    xhr.send();
}
Será exibida uma mensagem de erro quando o valor for diferente de 200. A questão é: como teremos acesso às requisições que vieram do servidor?
***********************
03-Realizando o parse da resposta
Para termos acesso às requisições que foram retornadas pelo servidor, vamos usar a propriedade xhr.responseText. Ela também vai capturar a mensagem de erro vinda do servidor:

//...

    if(xhr.readyState == 4) {

        if(xhr.status == 200) {

            console.log('Obtendo as negociações do servidor.');
            console.log(xhr.responseText);
        }else{
            console.log('Não foi possível obter as negociações do servidor.');
            console.log(xhr.responseText);
        }
    }
};
xhr.send();
}
Em seguida, recarregaremos a página e veremos o que será exibido no Console:

texto exibido no Console

Vemos um texto sendo exibido e, não, efetivamente um array. Isto acontece porque o JSON tem um formato textual para que os dados possam trafegar pela internet. Para transformarmos o JSON (texto) em um array de objetos, usaremos a função JSON.parse(), existente desde a versão anterior do JavaScript. Cada item do array é um objeto JavaScript. Mas nós poderíamos fazer como no exemplo abaixo?

if(xhr.readyState == 4) {
    if(xhr.status == 200) {

        this._listaNegociacoes.adiciona(JSON.parse(xhr.responseText));

    } else {

      console.log('Não foi possível obter as negociações do servidor.');
      console.log(xhr.responseText);
    }
}
Não poderíamos fazer isto, porque o adiciona() recebe uma negociação por vez. Na verdade, ela recebe uma instância de negociação. Se observarmos o array exibido no Console, não veremos uma instância de negociação, na verdade, cada item é um object. Primeiramente teremos que converter o JSON, fazendo o parse() e para cada item do array, teremos que criar uma negociação. Para realizarmos esta ação, usaremos a função map() - que varrerá o array e criará um novo com modificações. Usaremos uma arrow function:

if(xhr.readyState == 4) {
    if(xhr.status == 200) {

        JSON.parse(xhr.responseText)
         .map(objeto => new Negociacao(objeto.data, objeto.quantidade, objeto.valor));

    } else {

      console.log('Não foi possível obter as negociações do servidor.');
      console.log(xhr.responseText);
    }
}
Os itens serão chamados de objeto e para cada um deles, retornaremos uma Negociacao(). Como trabalhamos com uma arrow function, não precisaremos usar o return. Da lista que foi criada pelo map, vamos iterar com o forEach(), e para cada item teremos um negociação. A seguir, vamos incluir this._listaNegociacoes:

if(xhr.readyState == 4) {
    if(xhr.status == 200) {

        JSON.parse(xhr.responseText)
         .map(objeto => new Negociacao(objeto.data, objeto.quantidade, objeto.valor))
         .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));

    } else {

      console.log(xhr.responseText);
      this._mensagem.texto = 'Não foi possível obter as negociações da semana'; 
    }
}
Vamos entender o que foi feito: xhr.responseText é um texto, o JSON() irá transforma-lo para o formato textual para objeto. Para cada um dos objetos listados, converteremos em uma instância de negociação, no fim, um novo array será gerado. Depois, com o forEach(), percorreremos cada item e adiciono na minha lista de negociações. Dentro do else alteramos as mensagens no caso de erro. No console, será exibido o xhr.responseText e para o usuário, será mostrada uma mensagem de alto nível.

Mas quando executarmos o código como está, teremos problemas.

Se acessarmos o endereço localhost:3000/negociacoes/semana, veremos que a data está no formato de uma string um pouco diferente.

data no formato estranho

Nós estamos tentando passar objeto.data (com formato de texto) diretamente para Negociacao. A seguir, vamos passar a string objeto data para um construtor de Date().

if(xhr.status == 200) {
        JSON.parse(xhr.responseText)
      .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))
      .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));
}
string no console

Então, vamos instanciar uma nova data, baseada na string objeto.data. Recarregaremos a página do formulário e tudo funcionará corretamente. Para exibirmos uma mensagem de sucesso, adicionaremos o this._mensagem.texto. Faremos ajustes na mensagem de erro também.

if(xhr.status == 200) {
      JSON.parse(xhr.responseText)
        .map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))
        .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))
        this._mensagem.texto = 'Negociações importadas com sucesso.';
  } else {
      console.log(xhr.responseText);
      this._mensagem.texto = 'Não foi possível obter as negociações.';
  }
}
negociações importadas com sucesso

A mensagem será exibida corretamente e podemos considerar esta primeira parte finalizada. Depois, faremos uma pequena brincadeira para vermos o que acontece em um caso de erro. Mudaremos o endereço no importaNegociacoes() para negociacoes/xsemana:

importaNegociacoes() {

    let xhr = new XMLHttpRequest();
    xhr.open('GET', 'negociacoes/xsemana');

//...
Neste caso, quando tentarmos recarregar a página, o usuário verá a seguinte mensagem de erro:

mensagem de erro

No Console, veremos a mensagem de log:

mensagem de log

Conseguimos implementar a nossa solução com AJAX, usando JavaScript "puro" e sem utilizar bibliotecas como jQuery.
***********************
04-Separando as responsabilidades
Estamos conseguindo importar, mas a responsabilidade de buscar os dados do servidor não é da controller. Por isso, nós vamos isolar o código do importaNegociacoes(), numa classe que será especializada em obter as negociações do servidor e que será utilizada pela controller. Dentro da pasta services, vamos criar NegociacaoService.js.

importaNegociacoes() {

       let xhr = new XMLHttpRequest();

        xhr.open('GET', 'negociacoes/semana');

        xhr.onreadystatechange = () => {

            if(xhr.readyState == 4) {

                if(xhr.status == 200) {

                  JSON.parse(xhr.responseText)
                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)
                    .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));
                    this._mensagem.texto = 'Negociações importadas com sucesso.';

              } else {
                  console.log(xhr.responseText);
                  this._mensagem.texto = 'Não foi possível obter as negociações.';
              }
            }
      };

      xhr.send();
    }
}
A vantagem de isolarmos o código é que se tivermos outra parte do sistema que precisa obter a lista de negociações do servidor, não iremos cortar o código da controller. Nós reutilizaremos em uma nova classe NegociacaoService, que terá o método obterNegociacoesDaSemana() que retornará as negociações da semana:

class NegociacaoService { 
    obterNegociacoesDaSemana() {

        let xhr = new XMLHttpRequest();

        xhr.open('GET', 'negociacoes/semana');

        xhr.onreadystatechange = () => {

            if(xhr.readyState == 4) {

                if(xhr.status == 200) {

                JSON.parse(xhr.responseText)
                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)
                    .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));
                    this._mensagem.texto = 'Negociações importadas com sucesso.';

            } else {
                console.log(xhr.responseText);
                this._mensagem.texto = 'Não foi possível obter as negociações.';
            }
            }
    };

    xhr.send();
    }
}
O service não terá acesso a View, porque ele não tem referência para os elementos da controller. Logo, removemos this._mensagem.texto a mensagem de erro para o usuário. E importaremos o arquivo em index.html:

<script src="js/app/models/Negociacao.js"></script>
<script src="js/app/models/ListaNegociacoes.js"></script>
<script src="js/app/models/Mensagem.js"></script>
<script src="js/app/controllers/NegociacaoController.js"></script>
<script src="js/app/helpers/DateHelper.js"></script>
<script src="js/app/views/View.js"></script>
<script src="js/app/views/NegociacoesView.js"></script>
<script src="js/app/views/MensagemView.js"></script>
<script src="js/app/services/ProxyFactory.js"></script>
<script src="js/app/helpers/Bind.js"></script>
<script src="js/app/services/NegociacaoService.js"></script>
<script>
    let negociacaoController = new NegociacaoController();          
</script>
Em seguida, no arquivo NegociacaoController.js, vamos adicionar a variável service no importaNegociacoes().

importaNegociacoes() {

    let service = new NegociacaoService();

    service.obterNegociacoesDaSemana();
}
No método obterNegociacoesDaSemana() temos que ter acesso ao retorno, porque será na controller que levantaremos os dados com os quais atualizaremos o model e a View ser renderizada. Para isto, o método receberá a função chamada cb (callback).

class NegociacaoService {

    obterNegociacoesDaSemana(cb) {

        let xhr = new XMLHttpRequest();
        xhr.open('GET', 'negociacoes/semana');
        xhr.onreadystatechange = () => {
            if(xhr.readyState == 4) {
                if(xhr.status == 200) {
                    JSON.parse(xhr.responseText)
                      .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))
                      .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));
                } else {
                    console.log(xhr.responseText);
                }  
            }
        }

        xhr.send();
    }
}
Depois, em NegociacaoController.js, usaremos uma arrow function com dois valores:

importaNegociacoes() {

  let service = new NegociacaoService();

  service.obterNegociacoesDaSemana(() => {

  });
}
Quando o nosso servidor, via AJAX, buscar a negociação e estiver tudo pronto, ele chamará a função que adicionamos. Agora, vamos inserir um ifpara o caso em que ocorrer um erro.

importaNegociacoes() {

  let service = new NegociacaoService();

  service.obterNegociacoesDaSemana((err, negociacoes) => {
      if(err) {
          this._mensagem.texto = err;
          return;
      }

      negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));
      this._mensagem.texto = 'Negociações importadas com sucesso';
  });
}
Se o erro não retornar preenchido, o if não será executado. Com o forEach(), para cada negociação, vamos incorrer em this._listaNegociacoes.adiciona().

Também vamos adotar um convenção: em casos de erro, ele será descoberto sempre no primeiro parâmetro e o resultado da operação virá no segundo. Estamos aplicando um padrão que vem do mundo NodeJS, e que recebe o nome de Error-First-Callback.

Então, se ocorrer um erro, exibiremos a mensagem e daremos o retorno. Desta forma, as linhas abaixo do return não serão executadas. Mas no caso em que venha uma negociação, faremos o forEach().

Agora, em NegociacaoService, vamos implementar o callback(cb):

class NegociacaoService {

    obterNegociacoesDaSemana(cb) {

        let xhr = new XMLHttpRequest();
        xhr.open('GET', 'negociacoes/semana');
        xhr.onreadystatechange = () => {
            if(xhr.readyState == 4) {
                if(xhr.status == 200) {

                  cb(null, JSON.parse(xhr.responseText)
                        .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));

                } else {
                    console.log(xhr.responseText);
                    cb('Não foi possível obter as negociações da semana', null);
                }  
            }
        }

        xhr.send();
    }
}
Se ocorrer um erro, executaremos o cb de alto nível, informando para o usuário que não foi possível obter as negociações.

Esta estratégia de Error-First significa que passaremos a função obterNegociacoesDaSemana(), se tiver sucesso receberá o primeiro parâmetro null, indicando que não teve o erro, e no segundo parâmetro, teremos o retorno. Em caso de erro, o primeiro parâmetro passarem será o erro, e o segundo, será o valor null. Temos a opção de deixar o segundo parâmetro em branco também.

Ao recarregar a página e importar as negociações, veremos a mensagem de sucesso.

negociações foram importadas com sucesso

Nós isolamos a URL no serviço.

xhr.open('GET', 'negociacoes/semana');
Se tivermos diversas controllers utilizando o serviço, só precisaremos alterar a URL uma única vez. Caso a URL esteja errada, veremos a mensagem de erro:

não foi possivel obter as negociações

O código de NegociacaoController ficou mais limpo. Faremos um pequeno ajuste substituindo o err por erro:

importaNegociacoes() {

  let service = new NegociacaoService();

  service.obterNegociacoesDaSemana((erro,negociacoes) => {
      if(erro) {
          this._mensagem.texto = erro;
          return;
      }

      negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));
      this._mensagem.texto = 'Negociações importadas com sucesso';
  });
}
Fizemos uma pequena revisão de AJAX. Trabalhamos com requisições assíncronas, usando JavaScript puro. Aprendemos a isolar a lógica que geramos para realizar a requisição do servidor. Aprendemos a trabalhar com a ideia do callback e Error-First.
***********************
05-Exercicio - O objeto XMLHttpRequest
Vimos na aula como enviar uma requisição usando o XMLHttpRequest que segue basicamente os passos seguintes:

let xhr = new XMLHttpRequest();
xhr.open('GET', 'negociacoes/semana');
xhr.onreadystatechange = function() {

}
xhr.send();
Criamos o objeto, abrimos uma conexão, usamos a propriedade onreadystatechange e enviamos a requisição. A propriedade onreadystatechange guarda uma função para:

Alternativa correta
... ser executada se há alguma mudança nos dados no lado do servidor.


Alternativa correta
... ser executada se há alguma mudança na interface.


Alternativa correta
... ser executada apenas se a requisição foi finalizada.


Alternativa correta
... ser executada automaticamente cada vez que há uma alteração no estado da requisição.


Correto!

Uma requisição passa por estados, por isso o nome da propriedade em português é pronto para mudança de estado. Podemos passar uma função que verifica os estados e executará uma ação, como fizemos no video:

xhr.onreadystatechange = () => {
    if(xhr.readyState == 4) { //status 4
        if(xhr.status == 200) {
            console.log(xhr.responseText);
        } else {
            console.log(xhr.responseText);
            this._mensagem.texto = 'Não foi possível obter as negociações';
        }
    }
}
Cada status é representado através de um inteiro. Os estados possíveis são:

0: requisição ainda não iniciada.
1: conexão com o servidor estabelecida.
2: requisição recebida.
3: processando requisição.
4: requisição concluída e a resposta esta pronta.
Você encontrará mais informações sobre o objeto XMLHttpRequest no da Mozilla Developer Network.

***********************
06-Você sabia? Conheça a história do nome XMLHttpRequest
Vimos como usar o objeto XMLHttpRequest para enviar uma requisição AJAX. O estranho foi que nem usamos XML, e sim JSON! Para que então esse XML no nome?

A extensão XML foi um legado que ficou, mas hoje em dia é menos importante e até confuso. O XMLHttpRequest foi criado pela Microsoft (dentro da equipe Outlook), e o XML realmente era o mais usado na época . O Firefox implementou um objeto com o mesmo nome, mas que trabalhava com a estrutura de dados JSON e que acabou se tornando muito popular.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Muitas vezes, para usar AJAX, precisaremos de frameworks como o próprio jQuery, prototype ou AngularJS. Esses frameworks não só abstraem detalhes sobre o XMLHttpRequest como também oferecem vários outros recursos. Mas tenho certeza que você já sabe disso...

Se quiser aprender mais sobre jQuery ou Angular, na Alura, temos alguns cursos preparados para você:

jQuery I: Domine a biblioteca mais popular do mercado
jQuery II: Avance na biblioteca mais popular do mercado parte 2
AngularJS: crie webapps poderosas
***********************
07-Error-first Callback, nome chique!
O Error-first Callback, ou errorback, é um padrão que foi adotado no mundo Node.js. Como você já aprendeu, o callback é uma função chamada quando uma tarefa for executada, como uma requisição Ajax ou o acesso ao banco de dados. No entanto, a qualquer momento pode acontecer um erro no processamento e aí vem a questão de como lidar com isso.

A convenção é que cada callback receba sempre o erro no primeiro parâmetro. Na função callback, basta então verificar esse parâmetro para saber se ocorreu um erro ou não!

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Não abordamos Node.js neste treinamento, mas um exemplo não faz mal a ninguém.

Por exemplo, para ler um arquivo com Node.js, podemos escrever o seguinte código:

fs = require('fs');
fs.readFile('./arquivo.txt', function(erro, dados) {
    if(erro) {
        console.log('Um erro ocorreu');
        return;
    }
    console.log(dados);
});
Repare que a função readFile recebe como segundo parâmetro o callback, que por sua vez tem dois parâmetros: o erro e os dados; e dentro do callback testamos o erro!
***********************
08-Que tal enviar dados para o servidor?
Durante o treinamento, lidamos apenas com requisições do tipo GET, porque eu pressupunha que você já conhecia o XMLHttpRequest. Contudo, para dar um brilho ainda maior em sua experiência, vamos praticar um pouquinho mais. Desta vez, realizaremos uma requisição do tipo POST para enviar dados para o servidor. Só fique atento com a volatilidade dos dados cadastrados, isto é, se você reiniciar o servidor, perderá os dados enviados. Aliás, não há problema nenhum nisso, porque a ideia aqui é focar o código no lado do cliente, ou seja, código JavaScript e não código do back-end.

Para conseguir realizar uma requisição do tipo POST você precisa:

HTTP POST para /negociacoes;
Usar o cabeçalho Content-type sendo application/json;
No body um JSON da negociação.
Já preparamos um HTML bem básico para começar o cadastro! Para usá-lo no projeto crie uma nova página post.html, dentro do diretório aluraframe/client:

<!-- aluraframe/client/post.html -->
<html>
<head>
    <meta charset="UTF-8">
    <title>Negociações</title>
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/bootstrap-theme.css">
</head>

<body class="container">
    <form class="form">

        <div class="form-group">
            <label for="data">Data</label>
            <input type="date" id="data" class="form-control" required autofocus/>        
        </div>    

        <div class="form-group">
            <label for="quantidade">Quantidade</label>
            <input type="number" min="1" step="1" id="quantidade" class="form-control" value="1" required/>
        </div>

        <div class="form-group">
            <label for="valor">Valor</label>
            <input id="valor" type="number" class="form-control"  min="0.01" step="0.01" value="0.0" required />
        </div>

        <button class="btn btn-primary" type="submit" onclick="sendPost(event)">Enviar dados para servidor</button>
    </form>

    <script>

        function sendPost(event) {

            event.preventDefault();
            console.log("Enviando post");

            //aqui você deve ler os dados do formulário
            //construir o json
            //enviar o XMLHttpRequest
        }
    </script>
</body>
</html>
Se você achou que eu daria a solução logo de cara, se enganou! Contudo, depois de quebrar a cabeça, veja a solução do problema na minha resposta :)

Obs: Não esqueça de subir o servidor com npm start. Para acessar a página post.html, basta digitar localhost:3000/post.html

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Nosso código é bem simplório e não aproveita toda nossa estrutura MVC, mas vale para conhecer melhor o objeto XMLHttpRequest.

<!-- aluraframe/client/post.html -->
<!-- código anterior omitido -->
    <script>
        function sendPost(event) {

            event.preventDefault();

            console.log("Enviando post");

            let $ = document.querySelector.bind(document);
            inputData = $('#data');
            inputQuantidade = $('#quantidade');
            inputValor = $('#valor');

            let negociacao = {
                data: inputData.value,
                quantidade: inputQuantidade.value,
                valor: inputValor.value
            };

            let xhr = new XMLHttpRequest();
            xhr.open("POST", "/negociacoes", true);
            xhr.setRequestHeader("Content-type", "application/json");

            xhr.onreadystatechange = () => {

                if (xhr.readyState == 4) {

                    if (xhr.status == 200) {
                        inputData.value = '';
                        inputQuantidade.value = 1;
                        inputValor.value = 0.0;
                        inputData.focus();
                        alert('Negociação enviada com sucesso');
                    } else {
                        alert(`Não foi possível enviar a negociação: ${xhr.responseText}`);
                    }
                }
            }
            xhr.send(JSON.stringify(negociacao));

    }
    </script>
<!-- código posterior omitido -->
Um detalhe: não podemos enviar o objeto negociacao diretamente, precisamos convertê-lo para string, porque no protocolo HTTP os dados são transmitidos no formato texto. Veja que fizemos o contrário de quando recebemos os dados vindos do servidor. Lá, convertemos string em objeto.
***********************
09-Programação procedural não!
Olá! Esse é um exercício que você não precisa enviar resposta, mas deve implementar a alteração sugerida!

Aprendemos que o paradigma da orientação a objetos prega uma forte conexão entre dado e comportamento. Contudo, se olharmos a classe NegociacoesView vemos que ela foge um pouco dessa ideia. Vejamos parte do seu template:
<!-- aluraframe/client/js/views/NegociacoesView.js -->
<td>
    ${model.negociacoes.reduce((total, n) => total + n.volume, 0.0)}
</td>
Nesse ponto, iteramos sobre a lista de negociações do modelo ListaNegociacoes aplicando a função reduce para calcular o volume total. Esta é uma solução procedural onde temos o dado ListaNegociacoes de um lado e o comportamento que calcula o volume total do outro, ou seja, em NegociacoesView.

Uma solução mais orientada a objetos é criarmos um getter chamado volumeTotal em ListaNegociacoes. Com essa alteração, nosso template NegociacaoView pode acessar esse getter para obter o volume total das negociações. Dessa forma, onde quer que ListaNegociacoes seja utilizada, os dados e o comportamento que calcula o volume total caminharão juntos.

Alterando aluraframe/client/js/app/models/ListaNegociacoes.js:

class ListaNegociacoes {

    constructor() {

        this._negociacoes = [];
    }

    adiciona(negociacao) {

        this._negociacoes.push(negociacao);
    }

    get negociacoes() {

        return [].concat(this._negociacoes);
    }

    esvazia() {

        this._negociacoes = [];
    }

    // novo método
    get volumeTotal() {
       return this._negociacoes.reduce((total, n) => total + n.volume, 0.0);
    }
}
Agora, vamos pedir ao modelo que nos retorne o volume total:

<!-- aluraframe/client/js/app/views/NegociacoesView.js -->

<td>
    ${model.volumeTotal}
</td>
Perfeito! Sempre que alguém precisar saber o volume total pedirá ao modelo ListaNegociacoes, por exemplo, para gerar gráficos ou outros tipos de saída.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

O paradigma orientado a objetos ajuda bastante a organizar o código, e, sendo JavaScript uma linguagem multiparadigma podemos lançar mão de outros paradigmas quando necessário, por exemplo, o funcional.
***********************
10-
***********************