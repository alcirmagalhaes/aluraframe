01-Considerações finais e exercícios bônus
Você pode fazer o download completo do projeto até aqui.

Chegamos no final do treinamento de JavaScript, em que abordamos vários recursos da linguagem. Vimos sobre padrões de projeto, aplicamos o modelo MVC para estruturar nossa aplicação. Criamos serviços, trabalhamos com modelos, e no fim, trilhamos um caminho muito parecido com os aqueles que criaram frameworks no mercado voltados para JavaScript. Por exemplo, poderemos reutilizar o sistema de View e Bind, a maneira que organizamos o nosso projeto. A questão do template engine, da renderização, a mesma estrutura que aplicamos neste projeto, podemos aplicar em outros - ainda que o nosso código não seja tão rebuscado quanto dos frameworks do mercado.

A nossa proposta é que você conheça novos recursos da linguagem, aprenda a resolver determinados problemas que envolvem a organização de código, programação assíncrona e legibilidade. E por consequência, fomos criando algo parecido a um framework. Primeiramente, nossa solução final pode parecer mais verbosa do que a utilizada na primeira aula do curso, mas a atual é de fácil manutenção. Com ela conseguimos imprimir diversas regras de negócio, que garantem que o desenvolvedor não cometerá diversos erros, nos livramos da manipulação direta do DOM e trabalhamos com uma declarativa, sempre usando programação funcional e o Paradigma orientado a objeto.

Alguns assuntos não foram abordados, mas esperamos trabalhar nos próximos cursos. Por exemplo, não vimos a parte de carregamento de módulo, no nosso projeto somos obrigados a lembrar a ordem de carregamento dos scripts no index.html. Também não falamos sobre generators usados para suspender a execução de uma função no meio e outros recursos que podem tornar mais interessante o desenvolvimento de aplicações em JavaScript.

Espero que além de ter assistido as aulas, você tenha feito os exercícios. Para quem chegou até aqui e está começando em JavaScript, desejo que você não seja um ninja, mas um cangaceiro.

Sucesso para você!

****************************
02-Ah se eu pudesse ordenar minha tabela clicando na coluna...
Melhorando a experiência do usuário
Nossa aplicação é capaz de exibir uma lista de negociações em uma tabela, que pode ser alimentada pelo usuário ou importada de serviços na web. Para deixarmos a aplicação ainda melhor, que tal permitir que o usuário ordene a tabela, clicando em cada coluna?

Por exemplo, se o usuário clicar na coluna "QUANTIDADE", ordenaremos pela quantidade, se ele clicar na coluna "DATA", ordenaremos pela data. Além disso, se ele clicar mais de uma vez na mesma coluna, ele ordenará a tabela ascendentemente ou descendentemente. Nesse exercício, mostrarei uma "receita" para resolver este problema.

A primeira coisa que faremos é criar um método em nosso NegociacaoController, que será o responsável em ordenar a lista de negociações de ListaNegociacoes. A ordenação da lista envolve sua alteração, logo, a view NegociacoesView precisará ser atualizada. Ainda bem que implementamos um mecanismo caseiro de data binding (associação de dados) entre o model e view, no qual a alteração no modelo automaticamente renderiza a view ao qual foi associado.

Altere aluraframe/client/js/app/controllers/NegociacaoController.js e adicione o método ordena:

// aluraframe/client/js/app/controllers/NegociacaoController.js
// código anterior omitido

ordena(coluna) {
    // ainda vamos implementar o método!
}
Veja que o método ordena recebe como parâmetro a coluna que queremos ordenar. Lembre-se que ordenaremos nosso modelo pela coluna que o usuário clicar, sendo assim, nada mais justo do que associar o método ordena ao evento click do cabeçalho de cada coluna em NegociacoesView:

Alterando aluraframe/client/js/app/views/NegociacoesView.js:

<!-- aluraframe/client/js/app/views/NegociacoesView.js -->
<!-- código anterior omitido -->
<thead>
    <tr>
        <th onclick="negociacaoController.ordena('data')">DATA</th>
        <th onclick="negociacaoController.ordena('quantidade')">QUANTIDADE</th>
        <th onclick="negociacaoController.ordena('valor')">VALOR</th>
        <th onclick="negociacaoController.ordena('volume')">VOLUME</th>
    </tr>
</thead>
<!-- código posterior omitido -->
Quando associamos a chamada do método ao evento, na chamada do método passamos como parâmetro a coluna que desejamos ordenar. É importante que cada parâmetro passado exista como uma propriedade em nosso modelo Negociacao.

Você deve estar pensando "Mas Flávio, queremos é ordenar a lista de negociações que ListaNegociacoes guarda". Sim, mas cada negociação da lista é uma instância da classe Negociacao.

Primeiramente, vamos implementar a solução de ordenação sem nos preocupar em alternar ascendentemente ou descendentemente, resolveremos isso depois. Além disso, antes de partir para a solução, que tal entender como é feito o processo de ordenação de uma lista a partir de algum critério da lista.

Entendendo primeiro: Array.sort
Um Array em Javascript possui o método sort. Este método recebe uma estratégia de ordenação, ou seja, essa estratégia deve ser passada pelo desenvolvedor, mas deve seguir algumas regras. Vejamos um exemplo com escopo menor:

let lista = [10,1, 5, 9, 8, 12, 15];
Queremos ordenar essa lista em ordem crescente:

let lista = [10,1, 5, 9, 8, 12, 15];
lista.sort();
console.log(lista); // exibe a lista na ordem crescente
E se quisermos em ordem decrescente? Ordenamos primeiro de maneira ascendente e depois invertemos a ordem do array com reverse:

let lista = [10,1, 5, 9, 8, 12, 15];
lista.sort();
lista.reverse();
console.log(lista); // exibe a lista ordenada em ordem decrescente
Na verdade, mesmo a ordenação numérica tem problemas no JavaScript. Faça o teste, o resultado é um pouco inesperado. Contudo temos uma explicação detalhada sobre o ordenamento numérico do JavaScript em nosso blog.

Podemos até mesmo ordenar uma lista de strings, que o procedimento é o mesmo. A ordenação funcionou porque o padrão do sort é classificar os elementos em ordem crescente na ordem da tabela ASCII. Vamos para um exemplo mais complexo?

Agora temos uma lista de negociações:

let negociacoes = [
    new Negociacao(new Date(), 7, 200),
    new Negociacao(new Date(), 1, 300),
    new Negociacao(new Date(), 8, 100)
]
Queremos que a lista seja ordenada pela propriedade quantidade. O que será que vai acontecer se chamarmos lista.sort?

let negociacoes = [
    new Negociacao(new Date(), 7, 200),
    new Negociacao(new Date(), 1, 300),
    new Negociacao(new Date(), 8, 100)
]
negociacoes.sort();
negociacoes.forEach(negociacao => console.log(negociacao));
Pois é, o método sort não fez curso de "Mãe Diná" para saber qual critério deve usar para ordenar nossa lista. Além disso, a lista continua do jeito que está. O método sort não consegue aplicar a estratégia de ordenar de maneira crescente porque um objeto da classe Negociacao não tem representação na tabela ASCII. E agora?

Quando temos uma lista de objetos que não sejam strings, números ou boolean (com este tipo, false vem primeiro e depois true), precisamos passar o critério de ordenação para o método sort:

let negociacoes = [
    new Negociacao(new Date(), 7, 200),
    new Negociacao(new Date(), 1, 300),
    new Negociacao(new Date(), 8, 100)
]
negociacoes.sort((a, b) => a.quantidade -  b.quantidade);
negociacoes.forEach(negociacao => console.log(negociacao));
A função passada para sort recebe dois parâmetros que representam pares de elementos, isso porque toda comparação envolve um par de elementos. A regra é a seguinte: com o critério selecionado, se o valor retornado for 0 não há alteração a ser feita, se o valor retornado for positivo, b deve vir antes de a, se o valor for negativo, a deve vir antes de b.

Que tal ordenar pela data?

let negociacoes = [
    new Negociacao(new Date(), 7, 200),
    new Negociacao(new Date(), 1, 300),
    new Negociacao(new Date(), 8, 100)
]
negociacoes.sort((a, b) => a.data - b.data); //ordenação crescente utiliza a ordem normal
negociacoes.forEach(negociacao => console.log(negociacao));
Não fique chocado, quando subtraímos uma data pela outra é retornado um número que pode ser zero, positivo ou negativo, atendendo a regra do sort. Faça um teste no console do Chrome e veja você mesmo:

new Date(2016,4,12) - new Date(2016,5,1) // negativo
new Date(2016,5,1) - new Date(2016,4,12) // positivo
new Date(2016,5,1) -  new Date(2016,5,1) // 0
E se quisermos uma ordem decrescente? Só inverter a subtração:

let negociacoes = [
    new Negociacao(new Date(), 7, 200),
    new Negociacao(new Date(), 1, 300),
    new Negociacao(new Date(), 8, 100)
]
negociacoes.sort((a, b) => b.quantidade -  a.quantidade); // agora é b menos a!
negociacoes.forEach(negociacao => console.log(negociacao));
Agora que você já sabe definir um critério de ordenação para Array.sort, vamos voltar para o método ordena de NegociacaoController.

Implementando nossa solução
Já sabemos como ordenar um Array segundo um critério, mas o problema é que ao acessarmos this._listaNegociacoes.negociacoes nós recebemos uma cópia da lista original e qualquer alteração na lista não afeta a instância de ListaNegociacoes (ainda lembra da programação defensiva?). Para resolvermos isso, vamos criar o método ordena em ListaNegociacoes. Este método receberá o critério de ordenação, que será passado para a lista de negociações encapsulada pela classe:

// aluraframe/client/js/app/models/ListaNegociacoes.js

class ListaNegociacoes {

    // código anterior omitido

    // novo método!
    ordena(criterio) {
        this._negociacoes.sort(criterio);        
    }
}
Agora, vamos voltar para NegociacaoController e alterar seu método ordena e implementá-lo:

class NegociacaoController {

    // código anterior omitido

    ordena(coluna) {
        this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);    
    }
}
Veja que interessante. Não podemos fazer a.quantidade ou a.data, porque a propriedade usada no critério de ordenação é escolhida pelo usuário. Sendo assim, usamos a sintaxe objeto[nomePropriedade] para acessar a propriedade do objeto. Essa forma mais verbosa é interessantíssima quando queremos acessar as propriedades de um objeto dinamicamente .

Apesar de termos feitos essas mudanças, nada acontecerá. Precisamos atualizar a view quando o método ordena do nosso modelo for chamado, para isso, precisamos adicioná-lo na lista de métodos ou propriedades que desejamos monitorar do nosso modelo. Alterando NegociacaoController:

class NegociacaoController {

    constructor() {
        // propriedades omitidas

        this._listaNegociacoes = new Bind(
            new ListaNegociacoes(), 
            new NegociacoesView($('#    negociacoesView')), 
            'adiciona', 'esvazia', 'ordena');

        // outras propriedades omitidas             
    }
}
Perfeito, faça um teste agora. Alterne cliques em algumas colunas e veja o resultado. Gostou? Contudo, nossa solução está incompleta. Precisamos efetuar uma ordenação ascendente ou descendente quando o usuário clicar na mesma coluna. Como implementar isso?

Há sempre uma solução
A lógica é seguinte. Se a ordenação atual é X e ele clicou em outra coluna, trocando a ordenação para Y, não fazemos nada e deixamos a lista ser ordenada por Y. No entanto, se a ordenação atual é X e ele clica na coluna que solicita novamente uma ordenação por X, invertemos a ordem atual.

Vamos criar como propriedade de NegociacaoController a propriedade this._ordemAtual.

class NegociacaoController {

    constructor() {
        this._ordemAtual = ''; // quando a página for carregada, não tem critério. Só passa a ter quando ele começa a clicar nas colunas
    }
    // código posterior omitido
}
class NegociacaoController {

    // código anterior omitido

    ordena(coluna) {
        if(this._ordemAtual == coluna) {
            // inverte a ordem da lista!
        } else {
            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);
        }
        this._ordemAtual = coluna;
    }
}
E para invertermos a lista? Precisamos criar em nosso modelo ListaNegociacoes o método inverteOrdem, que chama this._negociacoes.reverse() para nós:

// aluraframe/client/js/app/models/ListaNegociacoes.js

class ListaNegociacoes {

    // código anterior omitido

    inverteOrdem() {
        this._negociacoes.reverse();
    }
}
Agora, podemos terminar nossa controller com esta última alteração:

class NegociacaoController {

    // código anterior omitido

    ordena(coluna) {
        if(this._ordemAtual == coluna) {
            this._listaNegociacoes.inverteOrdem();
        } else {
            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);    
        }
        this._ordemAtual = coluna;
    }
}
E claro, não podemos nos esquecer de adicionar o método inverteOrdem como um dos métodos que estamos monitorando para atualizar automaticamente a View:

class NegociacaoController {

    constructor() {
        // propriedades omitidas

        this._listaNegociacoes = new Bind(
            new ListaNegociacoes(), 
            new NegociacoesView($('#negociacoesView'), 
            'adiciona', 'esvazia', 'ordena', 'inverteOrdem');

        // outras propriedades omitidas             
    }
}
Perfeito! Experimente agora brincar com os critérios de ordenação clicando "igual a um louco" nos cabeçalhos das colunas da nossa tabela.
****************************
03-Ah se meu HttpService fizesse mais coisa...
Durante o treinamento criamos a classe HttpService para centralizar toda infraestrutura necessária para realizarmos requisições Ajax, inclusive utilizamos o padrão Promise para tornar nosso código mais fácil de manter e legível. Contudo, nosso serviço possui apenas o método get responsável em ler os dados do servidor. Que tal encapsularmos nesse serviço toda complexidade para realizarmos requisições do tipo POST?

Vamos alterar aluraframe/client/js/app/services/HttpService.js e adicionar o método POST:

class HttpService {

    get(url) {

        return new Promise((resolve, reject) => {


            let xhr = new XMLHttpRequest();

            xhr.open('GET', url);

            xhr.onreadystatechange = () => {

                if (xhr.readyState == 4) {

                    if (xhr.status == 200) {

                        resolve(JSON.parse(xhr.responseText));
                    } else {

                        reject(xhr.responseText);
                    }
                }
            };

            xhr.send();


        });
    }

    post(url, dado) {


        return new Promise((resolve, reject) => {

            let xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json");

        });

    }
}
Nosso novo método recebe uma URL e o dado que desejamos enviar. Criamos uma instância de XMLHttpRequest e usamos o verbo POST no já conhecido método open de XMLHttpRequest. Contudo, quando estamos enviando um dado para o servidor, precisamos dizer qual tipo de conteúdo estamos enviando. A ideia é enviarmos um dado no tipo (formato) JSON. É por isso que precisamos adicionar ao cabeçalho da requisição que será realizada a informação Content-Type com o valor application/JSON.

Os próximos passos vocês já conhecem. Precisamos saber quando a requisição foi realizada e para isso usamos o onreadystatechange:

class HttpService {

    get(url) {

        // código anterior omitido

        });
    }

    post(url, dado) {


        return new Promise((resolve, reject) => {

            let xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-type", "application/json");
            xhr.onreadystatechange = () => {

                if (xhr.readyState == 4) {

                    if (xhr.status == 200) {

                        resolve(JSON.parse(xhr.responseText));
                    } else {

                        reject(xhr.responseText);
                    }
                }
            };
            // falta enviar!!!!!!
        });

    }
}
Veja que usamos JSON.parse para converter o JSON (String) retornado pelo servidor em um objeto JavaScript. Mas perceba que ainda falta a chamada do método xhr.send que recebe com parâmetro os dados que queremos enviar. Mas atenção: como HTTP é um protocolo textual, não podemos enviar um objeto JavaScript diretamente, precisamos convertê-lo para uma string no formato JSON. Para isso, usamos JSON.stringify:

class HttpService {

    get(url) {

        // código omitido
    }

    post(url, dado) {


        return new Promise((resolve, reject) => {

            let xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-type", "application/json");
            xhr.onreadystatechange = () => {

                if (xhr.readyState == 4) {

                    if (xhr.status == 200) {

                        resolve(JSON.parse(xhr.responseText));
                    } else {

                        reject(xhr.responseText);
                    }
                }
            };
            xhr.send(JSON.stringify(dado)); // usando JSON.stringify para converter objeto em uma string no formato JSON.
        });

    }
}
Excelente, o método POST está pronto. Agora, se você fez os exercícios do capítulo anterior, deve lembrar que já fizemos um exercício para enviar dados com o método POST para nosso servidor e criamos a página post.html. Se você não lembra, é porque pulou exercícios e deixou de aprender várias coisas extras durante o treinamento. Enfim, partindo do pressuposto que você fez o exercício do post.html, vamos alterá-lo para fazer uso do nosso serviço e seu método post.

Primeiro, vamos ver o código antes da nossa modificação:

<!-- aluraframe/client/post.html -->
<!-- aluraframe/client/post.html -->
<html>
<head>
    <meta charset="UTF-8">
    <title>Negociações</title>
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/bootstrap-theme.css">
</head>

<body class="container">
    <form class="form">

        <div class="form-group">
            <label for="data">Data</label>
            <input type="date" id="data" class="form-control" required autofocus/>        
        </div>    

        <div class="form-group">
            <label for="quantidade">Quantidade</label>
            <input type="number" min="1" step="1" id="quantidade" class="form-control" value="1" required/>
        </div>

        <div class="form-group">
            <label for="valor">Valor</label>
            <input id="valor" type="number" class="form-control"  min="0.01" step="0.01" value="0.0" required />
        </div>

        <button class="btn btn-primary" type="submit" onclick="sendPost(event)">Enviar dados para servidor</button>
    </form>

    <script>
        function sendPost(event) {

            event.preventDefault();

            console.log("Enviando post");

            let $ = document.querySelector.bind(document);
            inputData = $('#data');
            inputQuantidade = $('#quantidade');
            inputValor = $('#valor');

            let negociacao = {
                data: inputData.value,
                quantidade: inputQuantidade.value,
                valor: inputValor.value
            };

            let xhr = new XMLHttpRequest();
            xhr.open("POST", "/negociacoes", true);
            xhr.setRequestHeader("Content-type", "application/json");

            xhr.onreadystatechange = () => {

                if (xhr.readyState == 4) {

                    if (xhr.status == 200) {
                        inputData.value = '';
                        inputQuantidade.value = 1;
                        inputValor.value = 0.0;
                        inputData.focus();
                        alert('Negociação enviada com sucesso');
                    } else {
                        alert(`Não foi possível enviar a negociação: ${xhr.responseText}`);
                    }
                }
            }
            xhr.send(JSON.stringify(negociacao));

    }
    </script>
</body>
</html>
Agora, importando o script aluraframe/client/js/app/services/HttpService.js:

<!-- aluraframe/client/post.html -->
<html>
<head>
    <meta charset="UTF-8">
    <title>Negociações</title>
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/bootstrap-theme.css">
</head>

<body class="container">
    <form class="form">

        <div class="form-group">
            <label for="data">Data</label>
            <input type="date" id="data" class="form-control" required autofocus/>        
        </div>    

        <div class="form-group">
            <label for="quantidade">Quantidade</label>
            <input type="number" min="1" step="1" id="quantidade" class="form-control" value="1" required/>
        </div>

        <div class="form-group">
            <label for="valor">Valor</label>
            <input id="valor" type="number" class="form-control"  min="0.01" step="0.01" value="0.0" required />
        </div>

        <button class="btn btn-primary" type="submit" onclick="sendPost(event)">Enviar dados para servidor</button>
    </form>

    <script src="js/app/services/HttpService.js"></script>
    <script>
        function sendPost(event) {

            event.preventDefault();

            console.log("Enviando post");

            let $ = document.querySelector.bind(document);
            inputData = $('#data');
            inputQuantidade = $('#quantidade');
            inputValor = $('#valor');

            let negociacao = {
                data: inputData.value,
                quantidade: inputQuantidade.value,
                valor: inputValor.value
            };

            // usando nosso serviço. Veja que nem guardei em uma variável 
            new HttpService()
                .post('/negociacoes', negociacao)
                .then(() => {
                    inputData.value = '';
                    inputQuantidade.value = 1;
                    inputValor.value = 0.0;
                    inputData.focus();
                    alert('Negociação enviada com sucesso');
                })
                .catch(erro => alert(`Não foi possível enviar a negociação: ${erro}`));
        }
    </script>
</body>
</html>
Veja que agora não precisamos lidar com detalhes de XMLHttpRequest quando formos realizar requisições do tipo POST!

VER OPINIÃO DO INSTRUTOR
Opinião do instrutor

Você pode refinar ainda mais a classe, adicionando outros métodos, inclusive tratamento de erros mais sofisticados. A moral da história é que podemos criar pequenas classes que nos ajudem no dia a dia.
****************************
04-Ah se meu código funcionasse no Firefox...
Desde o início do treinamento solicitei que vocês usassem o Google Chrome por ele suportar vários recursos do ES6. Contudo, o Firefox não fica atrás. Então, porque eu deixei esse navegador de fora? Simplesmente por eles não suportarem o input do tipo Date. Só por isso, Flávio? Sim!

Se eu tivesse começado o treinamento sem o auxílio do input do tipo Date muitos alunos focariam na validação do campo e perderiam o foco do treinamento. Contudo, com uma pequena alteração podemos fazer com que nosso código funcione no Firefox.

ATENÇÃO: o código foi testado no Firefox 45.0.2! Quer saber se versões mais antigas suportam os recursos que utilizamos? Acesse o módulo I deste curso, e veja a dica no exercício obrigatório do capítulo.

Alterando a interface
O primeiro passo é deixarmos de usar o input do tipo date. Vamos usar um input padrão, do tipo texto e usar um placeholder para solicitar que o usuário digite seu código no formato dd/mm/aaaa:

<!-- aluraframe/client/index.html -->
<div class="form-group">
    <label for="data">Data</label>
    <!-- alterou para input text e ainda esta com um placeholder -->
    <input type="text" placeholder="dd/mm/aaaa" id="data" class="form-control" required autofocus/>        
</div>
Alterando nosso helper de data
Precisamos alterar a classe DateHelper. Hoje ela espera receber um string no formato aaaa-mm-dd. Esse formato só era assim porque usávamos o input date, agora, vamos fazer com que o DateHelper funcione da seguinte maneira:

1 - validar uma data no formato dd/mm/yyyy

2 - extraia do formato dd/mm/yyyy um array com o ano, mes e dia.

Alterando a classe DateHelper:

// aluraframe/client/js/app/helpers/DateHelper.js

class DateHelper {

    // código anterior omitido

    static textoParaData(texto) {

        // mudamos a validação para aceitar o novo formato!
        if(!/\d{2}\/\d{2}\/\d{4}/.test(texto)) 
            throw new Error('Deve estar no formato dd/mm/aaaa');

        // veja que usamos no split '/' no lugar de '-'. Usamos `reverse` também para ficar ano/mes/dia.      
        return new Date(...texto.split('/').reverse().map((item, indice) => item - indice % 2));
    }
}
Quando alteramos nossa expressão regular, trocamos - por /, contudo, como esse é um caractere especial, precisamos usar \/. O nosso processo de desmembrar a string continua o mesmo, mas como temos uma data no formato dd/mm/aaaa, precisamos realizar um split usando / como separador e aplicar um .reverse()! A inversão dos itens do array é importante, porque a função map espera encontrar um array com ano, mês e dia e não dia, mês e ano.

Realize um teste ainda no Chrome. Digite por enquanto apenas datas válidas. Assim que você verificar que esta funcionando, digite seu nome no campo que captura a data e clique em incluir. O que acontecerá? Nada! Abrindo o console vemos a mensagem:

DateHelper.js:16 Uncaught Error: Deve estar no formato dd/mm/aaaa
Existe try e catch em JavaScript?
O usuário nem fica sabendo que sua data é inválida! Que tal exibirmos essa mensagem para o usuário para que ele saiba o que esta acontecendo? Lembre-se que no método DateHelper.textoParaData lançamos um erro com a instrução throw. Essa instrução indica que houve um erro e que o método onde ele ocorreu não vai tratá-lo, mas sim lançá-lo para quem chamou o método. Sendo assim, quem chamou DateHelper.textoParaData? O método _criaNegociacao de NegociacaoController.

Quando temos uma área que pode resultar em um erro, envolvemos essa área com a instrução try. É como se aquela área fosse um campo minado e que em algum momento pode ocorrer um erro e precisamos estar preparados para lidar com ele. No bloco try quando ocorre um lançamento com throw, podemos capturar o erro lançado no bloco catch. Vejamos:

class NegociacaoController {

    // código anterior omitido

    adiciona(event) {

        event.preventDefault();

        try {
            this._listaNegociacoes.adiciona(this._criaNegociacao());
            this._mensagem.texto = 'Negociação adicionada com sucesso'; 
            this._limpaFormulario();   
        } catch(erro) {
            this._mensagem.texto = erro;
        }
    }
Veja que a chamada de this._criaNegociacao() está dentro do bloco try, mas não ela apenas, mas o código que exibe a mensagem de sucesso e o de limpeza do formulário. A ideia é a seguinte: quando um erro é lançado, como this_criaNegociacao() não o trata, o erro sobe na pilha. Daí, o interpretador JavaScript perguntará se quem chamou this._criaNegociacao está preparado para tratá-lo. E sim, está!

Se um erro acontecer, nosso código será direcionado para a cláusula catch, e nela temos acesso ao erro lançado pela instrução throws lá do nosso DateHelper. Resumindo: se um erro acontecer, não exibiremos a mensagem de sucesso e não limparemos o formulário e exibiremos a mensagem de erro para o usuário. Se não houver erro, as três instruções bloco try serão executadas, ou seja, a negociação será adicionada, a mensagem de sucesso exibida e o formulário limpo.

Teste mais uma vez no Chrome. Funcionando? Agora abra o Firefox e verifique que tudo funciona.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Abdicamos do input Date para tornar nosso código compatível com o Firefox. Troca justa, não? :)
****************************
05-Ah se meu código funcionasse no Safari...
O Safari, até sua versão 9 suporta muito pouco o ES6 (nem com reza forte vai funcionar nosso código sem o uso de transpiler!). Contudo uma nova versão está no forno e essa promete ter o maior suporte de todos os navegadores. Eu realizei um teste com o Safari Tecnology Preview (versão teste da nova versão que sairá) e o código funcionou perfeitamente, mas há um detalhe interessante que vale a pena colocar aqui até para engrandecer a discussão.

OBS.: você precisa ter feito o fix do Firefox (ele não suporta o input date) e ainda estar usando a versão teste do próximo navegador da Apple. Tudo bem?

Durante o treinamento, aprendemos a usar let ao invés de var justamente por let criar escopo de bloco. Contudo, vejamos a tag script que inicializa nossa controller:

<!-- aluraframe/client/ndex.html -->
<!-- código anterior omitido -->
   <script>
        let negociacaoController = new NegociacaoController();
    </script>
<!-- código posterior omitido -->
No Chrome e no Firefox não há problema, mas na tecnologia Preview do Safari, apesar de suportar a sintaxe let apenas aqui o código não funciona. o Safari está errado? Vamos dizer que dependendo do ponto de vista não.

A sintaxe let criado foi para permitir um escopo de bloco de variáveis. Veja que o código anterior que declara nosso controller no escopo global não está dentro de nenhum bloco! O Safari entende que é uma declaração inválida, pois let deve ser usada apenas dentro de blocos. Para mim, faz sentido, apesar de o Chrome e o Firefox não serem tão chatos nesse ponto.

Sendo assim, para que nosso código funcione no Safari precisamos alterar simplesmente, apenas nesse ponto a declaração da variável para var:

<!-- aluraframe/client/index.html -->
<!-- código anterior omitido -->
<script>
        var negociacaoController = new NegociacaoController();
</script>
<!-- código posterior omitido -->
Então, podemos usar a seguinte regra: usamos var quando queremos que a variável tenha escopo global ou de função, e usarmos let quando queremos que a variável tenha sempre escopo de bloco. Em nosso caso, como nosso controller está no escopo global, faz todo sentido usarmos var.

VER OPINIÃO DO INSTRUTOR
Opinião do instrutor

É uma pequena alteração, justa, que não compromete outros navegadores.
****************************
06-Até sua versão 13, o Microsoft Edge não possui o método includes de Array. Veja que isso nos causará problemas. Vejamos o código do nosso ProxyFactory:

class ProxyFactory {

    static create(objeto, props, acao) {

        return new Proxy(objeto, {

                get(target, prop, receiver) {

                    // uso includes aqui!
                    if(props.includes(prop) && ProxyFactory._ehFuncao(target[prop])) {

                        return function() {

                            console.log(`interceptando ${prop}`);
                            let retorno = Reflect.apply(target[prop], target, arguments);
                            acao(target);
                            return retorno;
                        }
                    }

                    return Reflect.get(target, prop, receiver);
                },

                set(target, prop, value, receiver) {

                    let retorno = Reflect.set(target, prop, value, receiver);

                    // uso includes aqui!
                    if(props.includes(prop)) acao(target);
                    return retorno;
                }
        });
    }

    static _ehFuncao(func) {

        return typeof(func) == typeof(Function);
    }
E agora? Bom, para resolver o problema do includes podemos criar um polyfill extreme go horse que será suficiente para resolver o problema. Mas o que é um polyfill?

Criando um polyfill
Um polyfill é um script que emula o comportamento de um recurso quando esse não é suportado para garantir que nosso código funcione sem termos que abdicar do que é mais novo.

Crie o arquivo aluraframe/client/js/app/polyfill/es6.js. Nele, vamos adicionar no prototype de Array o método includes que usa por debaixo dos panos o já conhecido indexOf. Mas, Flávio, é assim que o includes oficial é implementado? Não faço ideia, o importante é que o resultado final seja o mesmo, e usar o indexOfpor debaixo dos panos resolve isso perfeitamente. Veja que o método só é adicionando se ele não existir:

// aluraframe/client/js/app/polyfill/es6.js

if(!Array.prototype.includes) {

    // Se não existir, adiciona

    console.log('Polyfill para Array.includes aplicado.');

    Array.prototype.includes = function(elemento) {
        return this.indexOf(elemento) != -1;
    };
}
Quando adicionamos métodos no prototype de uma classe ou função construtora, todas as instâncias dessa função construtora ou classe terão o método.

Agora vamos importar esse script no head da nossa página. Isso é necessário porque ele deve alterar Array antes que ele seja usado pela nossa aplicação. Alterando aluraframe/client/index.html:

<!-- aluraframe/client/index.html -->

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Negociações</title>
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/bootstrap-theme.css">

    <!-- carregando nosso polyfill -->
    <script src="js/app/polyfill/es6.js"></script>

</head>
Excelente, mas isso não é suficiente. Sabe por quê? Porque o Edge 13 não suporta parâmetros opcionais, apenas o Edge 14 suportará. E agora?

Edge 13 não suporta parâmetros opcionais do ES6
Aqui não há como fazer um polyfill como o que fizemos sem termos que escrever muito código hack. Aqui eu deixo ao aluno decidir ou não se abdica do parâmetro opcional usando uma estratégia antiga de JavaScript. Que tal revisitarmos esse antigo truque?

Hoje nossa classe Mensagem é assim:

class Mensagem {

    // o valor padrão quando o parâmetro não é chamado é ''
    constructor(texto='') {

        this._texto = texto;
    }

    get texto() {

        return this._texto;
    }

    set texto(texto) {

        this._texto = texto;
    }
}
Precisamos alterá-la dessa forma para funcionar no Edge:

class Mensagem {

    // DEIXOU DE RECEBER O PARÂMTRO OPCIONAL
    constructor(texto) {

        this._texto = texto || ''; // se texto for undefined, vai passar ''
    }

    get texto() {

        return this._texto;
    }

    set texto(texto) {

        this._texto = texto;
    }
}
Pronto. Com essas alterações (e mais a solução que usamos para o Firefox do campo date) nosso código funcionará no Microsot Edge.
VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Todos os hacks que fizemos até agora é para você ficar sabendo ainda mais de JavaScript. Contudo, há uma solução mais genérica e poderosa. Veja o próximo exercício.
****************************
07-Ah se meu código funcionasse em TODOS OS NAVEGADORES...
É possível que todo o código escrito em ES6 funcione em navegadores que nem suportem a nova versão do JavaScript. Para isso é necessário o uso de um transpiler. Aliás, um ótimo assunto a ser abordado no terceiro módulo deste treinamento. Não é mesmo? ;)

Vale salientar que os grandes vilões de compatibilidade do código JavaScript são os browsers mobile. A solução com transpiler é uma solução que abarca também esses dispositivos.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Eu até havia elaborado o esboço do terceiro módulo, mas preferi aguardar o feedback no fórum dos primeiros módulos. Uma ideia é ensinar o uso de transpilers.
****************************
08-Ah se ... peraí, o que é um transpiler mesmo?
Em um dos exercícios citei que uma solução definitiva para resolver problemas de compatibilidade do ES6 com todos os navegadores do mercado é usar um transpiler. Mas o que é isso?

Um transpiler é um compilador de código fonte para código fonte. Ou seja, em linguagens como C, compilamos o código fonte para um código binário para que esse rode em nosso sistema operacional. Já um transpiler poderia converter o código escrito em C para JavaScript, ou seja, é um compilador que traduz o código fonte de uma linguagem para outra.

No caso do JavaScript, o truque é compilar o código fonte (nossos arquivos JS) para JavaScript. Mas espera aí Flávio, não faz sentido algum converter código JavaScript para código JavaScript. Faz sim, porque no caso estaríamos convertendo um código em ES6 para ES5! Nesse contexto, o programador organiza seu código em ES6 para ajudar na manutenção e legibilidade, mas na hora que esse código for entrar em produção ele é todo convertido para ES5, ou seja, toda feature do ES6 é implementada (muitas vezes verbosamente) usando ES5! Com isso, qualquer navegador do mercado será capaz de compreender nosso código.

Vejamos um exemplo de código em ES6:

class Pessoa {

    constructor(nome, sobrenome = '') {
        this.nome = nome;
        this.sobrenome = sobrenome;
    }

    obterNomeCompleto() {
        return `${this.nome} ${this.sobrenome}`;
    }

    static imprimePessoas(pessoas) {
        pessoas.forEach((pessoa) => console.log(pessoa.nome));
    }
}
O mesmo código, convertido para ES5 através de um transpiler ficaria assim:

function Pessoa(nome, sobrenome) {

    this.nome = nome;
    this.sobrenome = sobrenome || ''
}

Pessoa.prototype.obterNomeCompleto = function() {
    return this.nome + ' ' + this.sobrenome
}

Pessoa.imprimePessoa(pessoas) {
    pessoas.forEach(function(pessoa) {
        console.log(pessoa.nome);
    });
}
O mais importante nessa abordagem, é nunca editarmos os arquivos em ES5, editamos sempre os que estão em ES6 que a cada modificação devem ser convertidos para ES5.

Esse é um assunto quente para o próximo módulo, não é mesmo?

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

A ideia é que no futuro o uso de transpilers não seja mais necessário. Contudo, continuar usando um transpiler permitirá o uso de recursos mais recentes da linguagem sem termos que esperar que sejam implementados pelos navegadores. Como disse, é um assunto quente para o próximo módulo deste treinamento.
****************************
09-Ah se eu pudesse aplicar o que aprendi no Node.js...
Tudo (arrow functions, proxy, classes...) o que aprendemos de ES6 pode ser aplicado na plataforma Node.js, mas tem um porém: você DEVE usar a versão 6 ou superior do Node.js. Versões anteriores não suportam totalmente os recursos que aprendemos aqui.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Quem te viu quem te vê, JavaScript! :)
****************************
10-Download do projeto completo
Perdeu seu projeto final do curso? Não se preocupe, você pode baixar o arquivo completo do projeto, inclusive com os exercícios bônus aqui. Sucesso e bom estudo!

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Se você perdeu seu projeto, não precisa se desesperar! :)
****************************