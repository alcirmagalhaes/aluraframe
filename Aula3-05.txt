01-xmlHttpRequest: será que existe algo de mais alto nível?
Continuaremos com as melhorias no código e a seguir, veremos algo mais avançado. Nós criamos a classe HttpService, depois, escondemos a complexidade de trabalhar com o XMLHttpRequest(). Nós fizemos método get e post devolverem uma Promise, e assim, escondemos a complexidade de trabalhar com tal objeto.

Neste curso, estamos usando o ECMAScript 2015. Não usamos mais o termo "ES 6", porque a cada ano, o JavaScript ganha novos recursos. No ES 2016, foi incluída uma API com o objetivo de simplificar a criação de requisições Ajax: Fetch API, uma API de busca do JS. O que veremos aqui, vai além do ECMAScript 2015.

Talvez, você fique preocupado se o seu código funcionará em outros navegadores, mas temos uma solução para a questão de compatibilidade. Mas, por enquanto, pedimos que você realize os testes no Chrome ou no Firefox, deixando os outros browsers de lado por enquanto.

Atualmente, o método get() está assim:

class HttpService

    get(url) {

        return new Promise((resolve, reject) => {

          let xhr = new XMLHttpRequest();

          xhr.open('GET', url);

          xhr.onreadystatechange = () => {

              if(xhr.readyState == 4) {

                  if(xhr.status == 200) {

                    resolve(JSON.parse(xhr.responseText));
                  } else {

                    reject(xhr.responseText);
                  }
              }
          };

          xhr.send();

          });
    }
Nós iremos apagar este trecho e reescreveremos o get(). No escopo global, nós iremos adicionar a variável fetch, no HttpService.js. O resultado dela está no then(), isto significa que o retorno será uma Promise por padrão.

class HttpService {

    get(url) {

      return fetch(url)
          .then(res => console.log(res));
    }
}
Pedimos que ela busque por uma resposta (res). Observe a diferença entre o código anterior com o atual. Conseguimos simplificá-lo bastante... No entanto, quando recebemos a resposta, ela está bruta - não sendo um texto ou JSON. Pediremos que a resposta seja convertida para o formato que desejamos. No caso, definiremos que ela seja json, mas poderíamos pedir em texto também.

class HttpService {

    get(url) {

      return fetch(url)
          .then(res => res.json());
    }
}
Com as alterações, o .then(res => res.json()) substituiu o JSON.parse do post(). Nós pediremos para o próprio objeto da resposta, vindo do Back-end, será o responsável pela conversão do formato. Como estamos trabalhando com uma Promise, também faremos o retorno.

Até aqui, nosso código já poderia estar funcionando. Você pode estar surpreso com o tamanho enxuto, mas conseguimos isto porque não precisamos trabalhar com o onreadystatechange. No entanto, temos a desvantagem de, ao trabalhar com a Fetch API, por não trabalharmos com estado, também não conseguiremos cancelar um requisição Ajax no meio. Com o readyState, quando mandamos a requisição e ela demora muito, temos a opção de cancelá-la. Porém, como são raros os casos em que queremos cancelar a requisição, a Fetch API é uma boa escolha.

negociações importadas

No entanto, faltou tratar os casos de erro na nossa Fetch API. Como o código identificava se tínhamos um erro? Testávamos com o readyState se a requisição estava completa e verificávamos se o estado era 200 ou com um valor próximo. Neste caso, nós usaremos o res.ok para fazermos testes com o status e nos indicará se é falso ou verdadeiro. Vamos ver como tratar o erro:

class HttpService {

    _handleErrors(res) {
        if(res.ok) {
            return res;
        } else {
          throw new Error(res.statusText);
        }
    }

    get(url) {

        return fetch(url)
            .then(res => this._handleErrors(res))
            .then(res => res.json());
    }
//...
Para manter a organização do código, criamos o método privado _handleErrors(). O .then no fetch devolverá a própria requisição this._handleErrors que será acessível no próximo .then e será convertido para json. Com o ifidentificamos se tudo funcionou bem com o res.ok, caso contrário, cairemos no else e exibiremos a mensagem de erro (statusText).

Mas vamos simplificar o código, reescrevendo o if:

_handleErrors(res) {
    if(!res.ok) throw new Error(res.statusText);
    return res;
}
Se tivermos problema, retornaremos o throw. Mas se tudo correr bem, retornaremos o res. A mensagem de erro antes era exibida com o responseText, e agora, usamos o res.statusText. Quando a exceção for lançada, a Promise não irá para o .then do get(). Ela seguirá para o catch.

Se atualizarmos a página no navegador, em alguns instantes receberemos a mensagem de que as negociações do período foram importadas corretamente.
********************************
02-Método Post
Agora vamos simplificar o método post(), localizado dentro do HttpService.js:

post(url, dado) {

    return new Promise((resolve, reject) => {

        let xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        xhr.setRequestHeader("Content-type", "application/json");
        xhr.onreadystatechange = () => {

            if (xhr.readyState == 4) {

                if (xhr.status == 200) {

                    resolve(JSON.parse(xhr.responseText));
                } else {

                    reject(xhr.responseText);
                }
            }
        };
        xhr.send(JSON.stringfy(dado));
    });
}
Vamos reescrevê-lo, adicionando o fetch. Como parâmetros usaremos a url e uma configuração da requisição que será recebida.

post(url, dado) {

        return fetch(url, {
            headers: { 'Content-Type': 'application/json' },
            method: 'post',
            body: JSON.stringify(dado)
        })
No headers, adicionando dentro das chaves, um objeto JavaScript (Content-type) e definimos seu valor. Em seguida, no body, converteremos o dado enviado de JSON para String.

Vamos também lidar com a parte de erro.

post(url, dado) {

        return fetch(url, {
            headers: { 'Content-Type': 'application/json' },
            method: 'post',
            body: JSON.stringify(dado)
        })
        .then(res => this._handleErrors(res));
}
No caso de erro, será lançada uma exceção e quem estiver usando o post do Http e chamar o método catch(), receberá a mensagem de erro. Em post.html, veremos o método sendo chamado:

new HttpService()
    .post('/negociacoes', negociacao)
    .then(() => {
        inputData.value = '';
        inputQuantidade.value = 1;
        inputValor.value = 0.0;
        inputData.focus();
        alert('Negociação enviada com sucesso');
      })
      .catch(erro => alert('Não foi possível enviar a negociação: $(erro)`));
  }
Voltaremos no navegador e acessaremos http://localhost:3000/post.html. Ao adicionarmos uma nova negociação e confirmarmos o envio dos dados, receberemos logo em seguida uma mensagem:

negociação enviado com sucesso

A negociação foi enviada com sucesso. Quando voltarmos para a página principal, veremos que os dados foram adicionados corretamente na tabela.

Conseguimos fechar a Fetch API, que possui ainda outros recursos, mas já podemos utilizar o que já foi visto até aqui. A seguir, veremos se temos como garantir o bom funcionamento do código em todos os navegadores.
********************************
03-Compatibilidade com uso de PolyFill
O Fetch API é tão interessante que alguns desenvolvedores criaram um polyfill, garantindo o bom funcionamento em todos os navegadores. Com este, podemos simular o Fetch API e o funcionamento será bastante semelhante.

Dentro do nosso projeto, temos uma pasta chamada polyfill, em que geramos o es6.js - para o caso de que não exista no navegador:

if(!Array.prototype.includes) {
    console.log('Polyfill para Array.includes aplicado.');
    Array.prototype.includes = function(elemento) {
        return this.indexOf(elemento) != -1;
    };
}
E temos o arquivo fetch.js que emulará com fidelidade o Fetch API, criando no escopo global do navegador esta funcionalidade.

Você pode usar este polyfill, baixando-o da pasta https://github.com/github/fetch/blob/master/fetch.js. O script deve ser carregado como primeiro script da nossa página em body.

Depois de baixá-lo e carregá-lo, experimente acessar a aplicação em outros navegadores. Para que o polyfill funcione é necessário no mínimo que o browser suporte promises.

Em seguida, importaremos o arquivo em index.html.

<div id="negociacoesView"></div>
<script src="js/app/polyfill/fetch.js"></script>
<script src="js/app/models/Negociacao.js"></script>
<script src="js/app/models/ListaNegociacoes.js"></script>
<script src="js/app/models/Mensagem.js"></script>
<script src="js/app/controllers/NegociacaoController.js"></script>
<script src="js/app/helpers/DateHelper.js"></script>
<script src="js/app/views/View.js"></script>
<script src="js/app/views/NegociacoesView.js"></script>
<script src="js/app/views/MensagemView.js"></script>
<script src="js/app/services/ProxyFactory.js"></script>
<script src="js/app/helpers/Bind.js"></script>
<script src="js/app/services/NegociacaoService.js"></script>
<script src="js/app/services/HttpService.js"></script>
<script src="js/app/services/ConnectionFactory.js"></script>
<script src="js/app/dao/NegociacaoDao.js"></script>
<script>
    var negociacaoController = new NegociacaoController();          
</script>
Observe que ele está posicionado como o primeiro script da página.

Com esta adição, o Fetch API funcionará no Safari e qualquer outro navegador que não suporte a API. Fechamos esta parte no nosso curso.


********************************
04-expcercícios - Considerações sobre Fetch API
Marque todas as alternativas verdadeiras sobre a Fetch API.

Alternativa correta
A Fetch API usa o padrão de projeto promise.


Podemos encadear chamadas do .then, inclusive tratar erros com .catch.

Alternativa correta
Existem polyfis disponíveis na internet que garantem a presença da Fetch API em navegadores que não a suportam, mas é importante que o navegador suporte no mínimo a API de promise.


Programadores front-end têm ficado cada vez mais interessados nessa API, ao ponto de utilizá-la em seus projetos, tudo com auxílio de um polyfill.

Alternativa correta
Por mais que seja utilizada por muitos desenvolvedores, a Fetch API ainda está sujeita a mudanças, pois é experimental ainda (pelo menos até agosto/2016).


O fato de ser experimental não afastou os desenvolvedores e muitos deles usam um polyfill para suportar esse recurso em navegadores que não o suportam. Mas é importante estar atento que o browser precisa suportar promises.

Alternativa correta
A Fetch API veio substituir o XMLHttpRequest.


A Fetch API não é uma substituição direta do XMLHttpRequest, isto porque a `Fetch API não permite abortar requisições em andamento, como pode ser visto nessa discussão: https://github.com/whatwg/fetch/issues/27

Sendo assim, se você não precisar cancelar requisições pendentes, a Fetch API é uma excelente escolha.

Por que esperar o futuro se já podemos utilizá-lo agora? A Fetch API é um bom exemplo.
********************************
05-Onde está o erro?
Laércio reescreveu a classe HttpService utilizando a Fetch API:

class HttpService {


    _handleErrors(res) {

        if (!res.ok) {
            throw new Error(res.statusText);
        }

        return res;
    }

    get(url) {

        fetch(url)
            .then(res => this._handleErrors(res))
            .then(res => res.json());
    }

    post(url, dado) {

        fetch(url, { 
            headers: { 'Content-Type': 'application/json' },
            method: 'post',
            body: JSON.stringify(dado)
        })
        .then(res => this._handleErrors(res)); 
    }

}
Contudo, quando os métodos get ou post são chamados, a seguinte mensagem de erro é exibida no console:

Cannot read property 'then' of undefined
Tente descobrir primeiro o erro do código e só depois continue para ver a resposta do instrutor.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

Veja que os dois métodos esqueceram de retornar uma promise, isso porque a função fetch retorna uma promise. Sem retorná-la, não é possível encadear uma chamada à then.
********************************
06-Consolidando seu conhecimento
Para que você consiga acompanhar os vídeos seguintes, implemente o que foi apresentado no vídeo. Caso já tenha feito, a ideia é que revise todo o conteúdo antes de continuar.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

O gabarito é o passo a passo apresentado no vídeo. Contudo, se dúvidas aparecerem, não deixe de procurar ajuda no fórum.
********************************