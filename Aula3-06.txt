01-O fantasma da incompatibilidade
Começando deste ponto? Você pode fazer o DOWNLOAD completo do projeto do capítulo anterior e continuar seus estudos a partir deste capítulo.

O código que estamos escrevendo usa o que tem de mais moderno na linguagem JavaScript - já vimos o Fetch API, que é um assunto mais avançado. Mas o que fizemos até agora será suportado por navegadores que não aceitam ES2015? Não, porque eles não suportam class, constructor ou let... Por exemplo, alguns celulares não rodam algumas destas funcionalidades. Mas devemos nos abdicar de escrever um código mais sucinto, por isso? Não. Pensaremos em uma solução.

Nós programaremos com o ES6 e depois, vamos compilar o código para o ES5. Este processo de downgrade recebe o nome de transcompilação e é feito com o uso de um transpiler (transcompilador). Com isto, o código da Controller consegue ter o mesmo resultado no ES 5. Desta forma, conseguimos aumentar a quantidade de navegadores que suportarão o nosso código, e assim, com a sua compatibilidade.

Encontramos vários transpilers no mercado: Babel, o TypeScript (que também atua como transcompilador). No nosso caso, focaremos no Babel, por ser open source.

A seguir, executaremos um passo importante no projeto: renomearemos a pasta app para app-es6. Com esta mudança, não precisaremos mudar o caminho dos scripts. O objetivo é que ao alterarmos um arquivo, ele será automaticamente compilado em ES5 e serão colocados em um nova pasta app.

pasta app

O código-fonte estará escrito com o ES 6, mas o resultado da transcompilação ficará na pasta app. E será desta que iremos importar os arquivos do index.html. Porém, se tentarmos recarregar a página do formulário agora, ela não funcionará porque nenhum scriptserá encontrado. Veremos como fazer a transcompilação.
******************************
02-Babel, instalação e build-step
Quando usamos Babel, estamos adicionando em nosso projeto um build step, ou seja, um passo de construção em nossa aplicação, isso significa que ela não pode ser consumida diretamente antes de passar por esse processo de construção. Sendo assim, o primeiro passo é instalar o Babel em nosso projeto para então configurá-lo.

O Babel depende que o Node.js esteja instalado e a boa notícia é que a infraestrutura do nosso curso já solicita a instalação desta plataforma para que o servidor web disponibilizado no curso pudesse funcionar.

Abra seu terminal favorito dentro da pasta aluraframe/client . Será dentro dela que criaremos o arquivo package.json, no qual os módulos do Node.js (Babel é um módulo) serão listados. Sua criação é simples, basta executar o comando npm init e teclar ENTER para todas as perguntas:

npm init
No final, será criado arquivo aluraframe/client/package.json com a seguinte estrutura:

{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
Agora, precisaremos instalar o babel-cli, o módulo do Babel que facilita bastante seu uso:

npm install babel-cli@6.10.1 --save-dev
É importante que você use a mesma versão que usei durante o treinamento, porque ela foi testada e homologada por mim. Outras versões podem introduzir bugs e você ficará horas e horas no fórum procurando ajuda achando que é um problema no seu código quando não é. No final do treinamento, depois de ter certeza de que tudo está funcionando, atualize para a versão mais nova se assim desejar.

Instalar o babel-cli não é suficiente, precisaremos instalar o suporte ao ES2015. Para isso, vamos instalar o módulo babel-preset-es2015:

npm install babel-preset-es2015@6.9.0 --save-dev
Agora que temos os dois módulos instalados, precisamos indicar para o Babel que ele deve usar o módulo babel-preset-es2015. Para isso, vamos criar o arquivo .babelrc dentro de aluraframe/client com a seguinte configuração:

{
  "presets": ["es2015"]
}
Agora, vem uma parte muito importante. Vamos renomear a pasta aluraframe/client/app para aluraframe/client/app-es6. O motivo dessa alteração é que ela deixará clara que tudo que estiver dentro dela são scripts usando ES6. Babel irá analisar essa pasta e em seguida, criará aluraframe/client/app. É esta pasta que terá nosso código em ES5. Inclusive veja que nem precisaremos alterar as importações dos scripts de aluraframe/client/index.html.

Renomeie o aluraframe/client/app para aluraframe/client/app-es6
******************************
03-Executando o Babel

Realizaremos um teste manual para entender o que estamos fazendo. Com o Terminal ainda aberto no pasta aluraframe/client execute o seguinte comando:

 ./node_modules/babel-cli/bin/babel.js js/app-es6 -d js/app
Em versões mais novas:

 ./node_modules/.bin/babel js/app-es6 -d js/app
(testado com babel-cli 6.26.0 e babel-preset-es2015 6.24.1)

Estamos executando o babel.js, passando como parâmetro a pasta de origem que passará pelo processo de transcompilação: js/app-es6. Nós usamos o parâmetro -d indicando qual será o diretório de destino, no caso js/app. E se compararmos o código em ES6 com o gerado pelo ES5 ?

Atualmente o código do aluraframe/client/js/app-es6/views/MensagemView.js está assim:

class View {

    constructor(elemento) {

        this._elemento = elemento;
    }

    template() {

        throw new Error('O método template deve ser implementado');
    }

    update(model) {
        this._elemento.innerHTML = this.template(model);
    }
}
A versão em ES 5 gerada pelo Babel (aluraframe/client/js/app/views/MensagemView.js) ficou assim:

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var View = function () {
    function View(elemento) {
        _classCallCheck(this, View);

        this._elemento = elemento;
    }

    _createClass(View, [{
        key: 'template',
        value: function template() {

            throw new Error('O método template deve ser implementado');
        }
    }, {
        key: 'update',
        value: function update(model) {
            this._elemento.innerHTML = this.template(model);
        }
    }]);

    return View;
}();
Não se preocupe com a legibilidade do código... O mais importante é entender que ele gerou um código compatível e funcional em ES5. Podemos testá-lo, abrindo outro terminal e subindo o servidor a partir da pasta aluraframe/server.

npm start
Agora, acesse a URL da aplicação localhost:3000.

Tudo continua funcionando perfeitamente. Mas é um tanto trabalhoso rodarmos o comando gigante manualmente sempre que quisermos compilar o nosso código. Será que temos uma opção mais simples? Veremos a seguir.

Vamos adicionar um script em aluraframe/client/package.json, que será um atalho para o comando recém executado.

{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "build": "babel js/app-es6 -d js/app "
    },
    "author": "",
    "license": "ISC"
    "devDependencies": {
      "babel-cli": "^6.10.1",
      "babel-preset-es2015": "^6.9.0"
  }
}
Veja que adicionei dentro de scripts a chave build. Eu poderia ter usado outro nome para a chave, mas o relevante é o seu valor. Observe que usamos como valor "babel js/app-es6 -d js/app", praticamente igual ao que executamos no terminal. A diferença é que não usamos o caminho completo.

Agora, para executar nosso script no Terminal executaremos o seguinte comando:

npm run build
Bem mais simples...

Podemos pedir para que Babel gere um sourcemap , ao compilar nossos arquivos. Trata-se de um arquivo que liga o arquivo resultante da compilação com o seu original para efeito de depuração, ou seja, para uso do debugger.

Vamos alterar aluraframe/client/package.json e adicionar o parâmetro --source-maps na chamada dos scripts:

{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "build": "babel js/app-es6 -d js/app --source-maps"
    },
    "author": "",
    "license": "ISC",
    "devDependencies": {
      "babel-cli": "^6.10.1",
      "babel-preset-es2015": "^6.9.0"
  }
}
Agora, o processo será exibido no Terminal. Em seguida, executaremos novamente:

npm run build
Dentro de aluraframe/client/js/app, foi criado o arquivo .map para cada arquivo resultante. Os navegadores carregam automaticamente os arquivos .map.

Atenção: o Visual Studio Code e outros editores de texto podem ter dificuldade em exibir em seu sidebar os arquivos gerados em aluraframe/client/js/app, isto ocorre porque eles são criados fora de seu ambiente. Não é preciso se preocupar com o fato, considerando que jamais poderemos alterar esses arquivos. Se quisermos alterá-los, devemos alterar os arquivos originais e, então, o Babel irá gerar novamente um código transcompilado. Se você quiser verificar se a pasta app foi criada, você pode fechar e abrir o editor novamente ou verificar pelo Terminal.

Depois, faremos um teste. Vamos alterar o método importaNegociacoes(), do arquivo NegociacaoController.js da pasta app-es6. A alteração será feita na seguinte linha:

this._service = new NegociacaoService();
Após a mudança, ela ficará assim:

this._service = new xNegociacaoService();
Observe que o nome da classe está errado. Após, rodamos novamente o comando "npm run build" para o Babel transcompilar o arquivo.

Vamos recarregar o navegador e novo arquivo será utilizado. Veremos que as negociações não foram importadas. Por isso, verificaremos no Console a mensagem de erro:

Uncaught ReferenceError: xNegociacaoService is not defined
Ele também nos indicará em qual linha está o problema, no nosso caso, a linha 22 do arquivo NegociacaoController.js. Vamos acessá-la e seremos direcionados para a linha do erro no arquivo original. Mas o arquivo carregado pelo navegador foi o transcompilado. Desta forma, resolvemos o assunto sobre transcompilação.
******************************
04-Compilando arquivos em tempo real
Nossa estratégia deixa um pouco a desejar, porque sempre que alterarmos um arquivo teremos que ir no Terminal e o rodar o comando build.

npm run build
A ação deve ser realizada quando fazemos o deploy, para garantir que está tudo compilado. Mas será que o desenvolvedor vai querer ter esta responsabilidade a todo momento? Por isso, o Babel vem como watcher, um observador de arquivos que automaticamente fará o processo de transcompilação quando um arquivo for alterado. Para habilitá-lo, vamos no arquivo package.json e adicionaremos o watch:

{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts"": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "build": "babel js/app-es6 -d js/app --source-maps",
      "watch": "babel js/app-es6 -d js/app --source-maps --watch"
    },
    "author": "",
    "license": "ISC",
    "devDependencies": {
      "babel-cli": "^6.10.1",
      "babel-preset-es2015": "^6.9.0"
  }
}
No Terminal, vamos executar o watch:

npm run watch
Ele irá compilar os arquivos e o Terminal ficará monitorando a modificação de todos eles. O processo de compilação correrá bem e ao recarregarmos a página de cadastro, tudo funcionará corretamente.

Para quem nunca havia trabalhado com o transpiler, mostramos que é possível trabalhar facilmente com Babel, também vimos como é o processo de transcompilação. Mesmo se usarmos recursos ainda mais avançados do JavaScript, o Babel conseguirá transcompilar para um código compatível para o ES5. Desta forma, conseguimos trabalhar com o que há de mais moderno, sem nos preocuparmos com compatibilidade.

Porém, se você está trabalhando com um navegador que não suporta Promise, terá que utilizar um polyfill para o mesmo. Neste caso, o Babel não resolverá. Temos ainda alguns truques, mas que ficarão para outro curso.
******************************
05-Revisão: transpiler
Que tal reforçar ainda mais o que aprendeu sobre transpiler? Vem comigo!

Revisão
Durante todo o treinamento usufruímos como desenvolvedores dos recursos do ES2015 visando a escrita de um código mais elegante e mais fácil de manter. Contudo, não é raro o próprio desenvolvedor se questionar sobre a compatibilidade do seu código em relação aos seus usuários ou visitantes do site.

Normalmente é realizado um estudo (métricas do Google Analytics, por exemplo) para saber a predominância de determinados browsers para então deixar de suportar aqueles com uso mais tímido. Ainda assim, se algum browser com baixo suporte ao ES2015 for um dos mais usados alguma atitude deve ser tomada.

Dentro desse contexto, o desenvolvedor tem que se equilibrar na balança que ora pesa para o lado do que há de mais moderno da linguagem e ora para a questão de compatibilidade, esta última, vencedora justa a maior parte do tempo.

Para solucionar os problemas de compatibilidade e ainda permitir que o desenvolvedor utilize o que há de mais moderno da linguagem JavaScript foram criados compiladores de código fonte para código fonte comumente chamados de transcompiladores (transpilers). Com eles, é possível, por exemplo, converter um código fonte de Ruby para JavaScript e vice-versa. No entanto, no universo JavaScript a ideia é compilarmos um código-fonte escrito em ES2015 para ES5, garantindo assim a compatibilidade do nosso código em diferentes tipos de browsers.

O resultado da transcompilação pode variar de transpiler para transpiler, mas o resultado final deve ser idêntico à funcionalidade original do código em ES2015. Inclusive não é raro o resultado da transcompilação para ES5 resulte em um código muito mais verboso.

Vejamos a seguinte hierarquia de projeto:

app
    js
        es6 
            a.js
    css
        a.css
    img
        logo.png
index.html
Nessa estrutura, temos o arquivo app/js/es6/a.js. Sabemos que o index.html não pode importar diretamente o arquivo, pois se estivermos executando nosso código no IE 9, por exemplo, não teremos suporte para vários recursos do ES6. A ideia é converter o código escrito em ES6 para ES5, por exemplo, resultando na seguinte estrutura:

app
    js
        es6 
            a.js <-- será transcompilado por um transpiler
    css
        a.css
    img
        logo.png
index.html
Resultado da transcompilação:

app
    js
        es5
            a.js <-- resultado da transcompilação
        es6 
            a.js 
    css
        a.css
    img
        logo.png
index.html
Veja que é o arquivo app/js/es5/a.js que deve ser importado em index.html. Além disso, qualquer mudança deve ser empreendida no arquivo app/js/es6/a.js. Depois de efetuada a alteração, o arquivo precisa ser transcompilado para que app/js/es5/a.js reflita a transcompilação da versão mais nova do código.

O processo de transcompilação normalmente não é feito manualmente, mas por meio de ferramentas que tornam transparentes esse processo para o desenvolvedor, evitando assim erros oriundos do esquecimento da compilação deste ou daquele arquivo que foi atualizado.

VER OPINIÃO DO INSTRUTOR
Opinião do instrutor

Entender o workflow do nosso projeto quando trabalhamos com transcompiladores é importante para que o programador se sinta seguro.
******************************
06-exercícios - Sobre Babel

Babel é um transcompilador muito famoso no cenário open source. Marque as opções verdadeiras sobre esta ferramenta:

Alternativa correta
Configurações específicas do Babel como a ativação de um preset ficam no arquivo package.json.


Configurações específicas do Babel ficam no arquivo oculto .babelrc.

Alternativa correta
Basta instalar Babel através do npm que já estaremos preparados para transcompilar de ES2015 (ES6) para ES5!


Babel é ma ferramenta que traduz um código em outro, contudo ela não esta preparada gerar a conversão de qualquer código. Por isso é preciso instalar um preset para que ele seja capaz de transcompilar nosso código de ES2015 (ES6) para ES5!

Alternativa correta
Babel possui recursos nativos que permitem o monitoramento e compilação de scripts de maneira automática, sem a intervenção do desenvolvedor.


O binário do Babel possui o modo watch que monitora mudanças de arquivo e quando configurado corretamente permite compilar nossos script sem que o desenvolvedor assuma essa responsabilidade.

Alternativa correta
Babel é um módulo do Node.js e depende dele para funcionar.


Babel é um módulo do Node.js. Ele é baixado através do npm, o gerenciador de pacotes da plataforma Node.js.

Babel é uma ferramenta que pode ser facilmente incluída em seu workflow de desenvolvimento. Mas como qualquer ferramenta, precisa ser configurada.
******************************
07-exercícios - Onde foi que eu errei?
Marcelo criou arquivo aluraframe/client/.babelrc configurando-o desta maneira:

{
  'presets': ['es2015']
}
Contudo, a configuração não funciona. Antes de continuar e ver a explicação do instrutor tente descobrir o motivo dela não funcionar.

VER OPINIÃO DO INSTRUTOR
----
Opinião do instrutor

O arquivo .babelrc deve estar no formato JSON e uma das exigências desse formato é usarmos aspas duplas para representar suas chaves, inclusive strings.

{
  "presets": ["es2015"]
}

******************************
08-exercícios - Evitando Babel no escopo global
Muitos tutoriais da internet instalam Babel e outros módulos do Node.js globalmente por uma questão de brevidade, mas que não é uma boa prática.

Se você precisa da nova versão do Babel porque seu projeto A depende de um novo recurso, a atualização da instalação global será aplicada em todos os projetos. Ela pode funcionar perfeitamente em A, mas pode quebrar o projeto B que até então funcionava se algum BUG foi introduzido, um BUG que só afeta um recurso utilizado por B.

Sendo assim, instalamos Babel local ao projeto, contudo não é nada elegante a forma com que chamaremos manualmente o binário do babel em nosso terminal. Para contornar esse problema e ainda termos o babel instalado localmente para cada um dos nosso projetos, podemos criar um script em package.json que chamará o Babel para nós.

Qual das opções abaixo possui a chave script configurada corretamente para chamar Babel e compilar todos os nossos arquivos dentro da pasta aluraframe/client/js/app-es6 resultando na pasta aluraframe/client/js/app:

Alternativa correta
{

  // código omitido

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "babel js/app-es6 -d js/app "
  },

  // código omitido
}

Correto!

Alternativa correta
{

  // código omitido

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "babel js/app-es6 js/app "
  },

  // código omitido
}

Veja que faltou parâmetro -d para indicar a pasta destino.

Alternativa correta
{
  // código omitido

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
    "build": "babel js/app-es6 -d js/app "
  },

  // código omitido
}

Veja que o JSON esta quebrando. Faltou uma vírgula separando o script test do script build.

Dentro da pasta aluraframe/client, com o terminal aberto, se executarmos o comando npm run build o npm executará o comando definido para a chave build, aquele executa o Babel para nós passando seus parâmetros.
******************************
09-
******************************
10-
******************************
11-
******************************