01-O fantasma da incompatibilidade
Começando deste ponto? Você pode fazer o DOWNLOAD completo do projeto do capítulo anterior e continuar seus estudos a partir deste capítulo.

O código que estamos escrevendo usa o que tem de mais moderno na linguagem JavaScript - já vimos o Fetch API, que é um assunto mais avançado. Mas o que fizemos até agora será suportado por navegadores que não aceitam ES2015? Não, porque eles não suportam class, constructor ou let... Por exemplo, alguns celulares não rodam algumas destas funcionalidades. Mas devemos nos abdicar de escrever um código mais sucinto, por isso? Não. Pensaremos em uma solução.

Nós programaremos com o ES6 e depois, vamos compilar o código para o ES5. Este processo de downgrade recebe o nome de transcompilação e é feito com o uso de um transpiler (transcompilador). Com isto, o código da Controller consegue ter o mesmo resultado no ES 5. Desta forma, conseguimos aumentar a quantidade de navegadores que suportarão o nosso código, e assim, com a sua compatibilidade.

Encontramos vários transpilers no mercado: Babel, o TypeScript (que também atua como transcompilador). No nosso caso, focaremos no Babel, por ser open source.

A seguir, executaremos um passo importante no projeto: renomearemos a pasta app para app-es6. Com esta mudança, não precisaremos mudar o caminho dos scripts. O objetivo é que ao alterarmos um arquivo, ele será automaticamente compilado em ES5 e serão colocados em um nova pasta app.

pasta app

O código-fonte estará escrito com o ES 6, mas o resultado da transcompilação ficará na pasta app. E será desta que iremos importar os arquivos do index.html. Porém, se tentarmos recarregar a página do formulário agora, ela não funcionará porque nenhum scriptserá encontrado. Veremos como fazer a transcompilação.
******************************
02-Babel, instalação e build-step
Quando usamos Babel, estamos adicionando em nosso projeto um build step, ou seja, um passo de construção em nossa aplicação, isso significa que ela não pode ser consumida diretamente antes de passar por esse processo de construção. Sendo assim, o primeiro passo é instalar o Babel em nosso projeto para então configurá-lo.

O Babel depende que o Node.js esteja instalado e a boa notícia é que a infraestrutura do nosso curso já solicita a instalação desta plataforma para que o servidor web disponibilizado no curso pudesse funcionar.

Abra seu terminal favorito dentro da pasta aluraframe/client . Será dentro dela que criaremos o arquivo package.json, no qual os módulos do Node.js (Babel é um módulo) serão listados. Sua criação é simples, basta executar o comando npm init e teclar ENTER para todas as perguntas:

npm init
No final, será criado arquivo aluraframe/client/package.json com a seguinte estrutura:

{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
Agora, precisaremos instalar o babel-cli, o módulo do Babel que facilita bastante seu uso:

npm install babel-cli@6.10.1 --save-dev
É importante que você use a mesma versão que usei durante o treinamento, porque ela foi testada e homologada por mim. Outras versões podem introduzir bugs e você ficará horas e horas no fórum procurando ajuda achando que é um problema no seu código quando não é. No final do treinamento, depois de ter certeza de que tudo está funcionando, atualize para a versão mais nova se assim desejar.

Instalar o babel-cli não é suficiente, precisaremos instalar o suporte ao ES2015. Para isso, vamos instalar o módulo babel-preset-es2015:

npm install babel-preset-es2015@6.9.0 --save-dev
Agora que temos os dois módulos instalados, precisamos indicar para o Babel que ele deve usar o módulo babel-preset-es2015. Para isso, vamos criar o arquivo .babelrc dentro de aluraframe/client com a seguinte configuração:

{
  "presets": ["es2015"]
}
Agora, vem uma parte muito importante. Vamos renomear a pasta aluraframe/client/app para aluraframe/client/app-es6. O motivo dessa alteração é que ela deixará clara que tudo que estiver dentro dela são scripts usando ES6. Babel irá analisar essa pasta e em seguida, criará aluraframe/client/app. É esta pasta que terá nosso código em ES5. Inclusive veja que nem precisaremos alterar as importações dos scripts de aluraframe/client/index.html.

Renomeie o aluraframe/client/app para aluraframe/client/app-es6
******************************
03-
******************************
04-
******************************
05-
******************************
06-
******************************
07-
******************************
08-
******************************
09-
******************************
10-
******************************
11-
******************************