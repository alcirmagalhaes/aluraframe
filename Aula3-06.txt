01-O fantasma da incompatibilidade
Começando deste ponto? Você pode fazer o DOWNLOAD completo do projeto do capítulo anterior e continuar seus estudos a partir deste capítulo.

O código que estamos escrevendo usa o que tem de mais moderno na linguagem JavaScript - já vimos o Fetch API, que é um assunto mais avançado. Mas o que fizemos até agora será suportado por navegadores que não aceitam ES2015? Não, porque eles não suportam class, constructor ou let... Por exemplo, alguns celulares não rodam algumas destas funcionalidades. Mas devemos nos abdicar de escrever um código mais sucinto, por isso? Não. Pensaremos em uma solução.

Nós programaremos com o ES6 e depois, vamos compilar o código para o ES5. Este processo de downgrade recebe o nome de transcompilação e é feito com o uso de um transpiler (transcompilador). Com isto, o código da Controller consegue ter o mesmo resultado no ES 5. Desta forma, conseguimos aumentar a quantidade de navegadores que suportarão o nosso código, e assim, com a sua compatibilidade.

Encontramos vários transpilers no mercado: Babel, o TypeScript (que também atua como transcompilador). No nosso caso, focaremos no Babel, por ser open source.

A seguir, executaremos um passo importante no projeto: renomearemos a pasta app para app-es6. Com esta mudança, não precisaremos mudar o caminho dos scripts. O objetivo é que ao alterarmos um arquivo, ele será automaticamente compilado em ES5 e serão colocados em um nova pasta app.

pasta app

O código-fonte estará escrito com o ES 6, mas o resultado da transcompilação ficará na pasta app. E será desta que iremos importar os arquivos do index.html. Porém, se tentarmos recarregar a página do formulário agora, ela não funcionará porque nenhum scriptserá encontrado. Veremos como fazer a transcompilação.
******************************
02-Babel, instalação e build-step
Quando usamos Babel, estamos adicionando em nosso projeto um build step, ou seja, um passo de construção em nossa aplicação, isso significa que ela não pode ser consumida diretamente antes de passar por esse processo de construção. Sendo assim, o primeiro passo é instalar o Babel em nosso projeto para então configurá-lo.

O Babel depende que o Node.js esteja instalado e a boa notícia é que a infraestrutura do nosso curso já solicita a instalação desta plataforma para que o servidor web disponibilizado no curso pudesse funcionar.

Abra seu terminal favorito dentro da pasta aluraframe/client . Será dentro dela que criaremos o arquivo package.json, no qual os módulos do Node.js (Babel é um módulo) serão listados. Sua criação é simples, basta executar o comando npm init e teclar ENTER para todas as perguntas:

npm init
No final, será criado arquivo aluraframe/client/package.json com a seguinte estrutura:

{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
Agora, precisaremos instalar o babel-cli, o módulo do Babel que facilita bastante seu uso:

npm install babel-cli@6.10.1 --save-dev
É importante que você use a mesma versão que usei durante o treinamento, porque ela foi testada e homologada por mim. Outras versões podem introduzir bugs e você ficará horas e horas no fórum procurando ajuda achando que é um problema no seu código quando não é. No final do treinamento, depois de ter certeza de que tudo está funcionando, atualize para a versão mais nova se assim desejar.

Instalar o babel-cli não é suficiente, precisaremos instalar o suporte ao ES2015. Para isso, vamos instalar o módulo babel-preset-es2015:

npm install babel-preset-es2015@6.9.0 --save-dev
Agora que temos os dois módulos instalados, precisamos indicar para o Babel que ele deve usar o módulo babel-preset-es2015. Para isso, vamos criar o arquivo .babelrc dentro de aluraframe/client com a seguinte configuração:

{
  "presets": ["es2015"]
}
Agora, vem uma parte muito importante. Vamos renomear a pasta aluraframe/client/app para aluraframe/client/app-es6. O motivo dessa alteração é que ela deixará clara que tudo que estiver dentro dela são scripts usando ES6. Babel irá analisar essa pasta e em seguida, criará aluraframe/client/app. É esta pasta que terá nosso código em ES5. Inclusive veja que nem precisaremos alterar as importações dos scripts de aluraframe/client/index.html.

Renomeie o aluraframe/client/app para aluraframe/client/app-es6
******************************
03-Executando o Babel

Realizaremos um teste manual para entender o que estamos fazendo. Com o Terminal ainda aberto no pasta aluraframe/client execute o seguinte comando:

 ./node_modules/babel-cli/bin/babel.js js/app-es6 -d js/app
Em versões mais novas:

 ./node_modules/.bin/babel js/app-es6 -d js/app
(testado com babel-cli 6.26.0 e babel-preset-es2015 6.24.1)

Estamos executando o babel.js, passando como parâmetro a pasta de origem que passará pelo processo de transcompilação: js/app-es6. Nós usamos o parâmetro -d indicando qual será o diretório de destino, no caso js/app. E se compararmos o código em ES6 com o gerado pelo ES5 ?

Atualmente o código do aluraframe/client/js/app-es6/views/MensagemView.js está assim:

class View {

    constructor(elemento) {

        this._elemento = elemento;
    }

    template() {

        throw new Error('O método template deve ser implementado');
    }

    update(model) {
        this._elemento.innerHTML = this.template(model);
    }
}
A versão em ES 5 gerada pelo Babel (aluraframe/client/js/app/views/MensagemView.js) ficou assim:

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var View = function () {
    function View(elemento) {
        _classCallCheck(this, View);

        this._elemento = elemento;
    }

    _createClass(View, [{
        key: 'template',
        value: function template() {

            throw new Error('O método template deve ser implementado');
        }
    }, {
        key: 'update',
        value: function update(model) {
            this._elemento.innerHTML = this.template(model);
        }
    }]);

    return View;
}();
Não se preocupe com a legibilidade do código... O mais importante é entender que ele gerou um código compatível e funcional em ES5. Podemos testá-lo, abrindo outro terminal e subindo o servidor a partir da pasta aluraframe/server.

npm start
Agora, acesse a URL da aplicação localhost:3000.

Tudo continua funcionando perfeitamente. Mas é um tanto trabalhoso rodarmos o comando gigante manualmente sempre que quisermos compilar o nosso código. Será que temos uma opção mais simples? Veremos a seguir.

Vamos adicionar um script em aluraframe/client/package.json, que será um atalho para o comando recém executado.

{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "build": "babel js/app-es6 -d js/app "
    },
    "author": "",
    "license": "ISC"
    "devDependencies": {
      "babel-cli": "^6.10.1",
      "babel-preset-es2015": "^6.9.0"
  }
}
Veja que adicionei dentro de scripts a chave build. Eu poderia ter usado outro nome para a chave, mas o relevante é o seu valor. Observe que usamos como valor "babel js/app-es6 -d js/app", praticamente igual ao que executamos no terminal. A diferença é que não usamos o caminho completo.

Agora, para executar nosso script no Terminal executaremos o seguinte comando:

npm run build
Bem mais simples...

Podemos pedir para que Babel gere um sourcemap , ao compilar nossos arquivos. Trata-se de um arquivo que liga o arquivo resultante da compilação com o seu original para efeito de depuração, ou seja, para uso do debugger.

Vamos alterar aluraframe/client/package.json e adicionar o parâmetro --source-maps na chamada dos scripts:

{
  "name": "client",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "build": "babel js/app-es6 -d js/app --source-maps"
    },
    "author": "",
    "license": "ISC",
    "devDependencies": {
      "babel-cli": "^6.10.1",
      "babel-preset-es2015": "^6.9.0"
  }
}
Agora, o processo será exibido no Terminal. Em seguida, executaremos novamente:

npm run build
Dentro de aluraframe/client/js/app, foi criado o arquivo .map para cada arquivo resultante. Os navegadores carregam automaticamente os arquivos .map.

Atenção: o Visual Studio Code e outros editores de texto podem ter dificuldade em exibir em seu sidebar os arquivos gerados em aluraframe/client/js/app, isto ocorre porque eles são criados fora de seu ambiente. Não é preciso se preocupar com o fato, considerando que jamais poderemos alterar esses arquivos. Se quisermos alterá-los, devemos alterar os arquivos originais e, então, o Babel irá gerar novamente um código transcompilado. Se você quiser verificar se a pasta app foi criada, você pode fechar e abrir o editor novamente ou verificar pelo Terminal.

Depois, faremos um teste. Vamos alterar o método importaNegociacoes(), do arquivo NegociacaoController.js da pasta app-es6. A alteração será feita na seguinte linha:

this._service = new NegociacaoService();
Após a mudança, ela ficará assim:

this._service = new xNegociacaoService();
Observe que o nome da classe está errado. Após, rodamos novamente o comando "npm run build" para o Babel transcompilar o arquivo.

Vamos recarregar o navegador e novo arquivo será utilizado. Veremos que as negociações não foram importadas. Por isso, verificaremos no Console a mensagem de erro:

Uncaught ReferenceError: xNegociacaoService is not defined
Ele também nos indicará em qual linha está o problema, no nosso caso, a linha 22 do arquivo NegociacaoController.js. Vamos acessá-la e seremos direcionados para a linha do erro no arquivo original. Mas o arquivo carregado pelo navegador foi o transcompilado. Desta forma, resolvemos o assunto sobre transcompilação.
******************************
04-
******************************
05-
******************************
06-
******************************
07-
******************************
08-
******************************
09-
******************************
10-
******************************
11-
******************************