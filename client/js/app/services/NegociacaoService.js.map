{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n      \r\n    constructor(){\r\n\r\n        this._http = new HttpService();\r\n    }\r\n    \r\n    obterNegociacoesDaSemana() {\r\n\r\n        return this._http\r\n                .get('negociacoes/semana')\r\n                .then( negociacoes => {\r\n                    return negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana.');\r\n                });\r\n    };\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return this._http\r\n                .get('negociacoes/anterior')\r\n                .then( negociacoes => {\r\n                    return negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana anterior.');\r\n                });\r\n    };\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return this._http\r\n                .get('negociacoes/retrasada')\r\n                .then( negociacoes => {\r\n                    return negociacoes.map(objeto=> new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana retrasada.');\r\n                });\r\n    };\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error('Não foi possível buscar as negociações para importar');\r\n        });\r\n\r\n    }\r\n    \r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso')\r\n            .catch((erro) => {\r\n\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            });\r\n    }\r\n\r\n    lista(){\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                \r\n                console.log(erro);\r\n                throw new Error(\"Não foi possível obter as negociações\");\r\n        })\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDao(conexao))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negosiações apagadas com sucesso')\r\n            .catch((erro) => {\r\n\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociaçoes')\r\n            }) \r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                \r\n                negociacoes.filter(negociacao =>  \r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(error => {\r\n                \r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar negociações para importar')\r\n            });\r\n    }\r\n    \r\n}"]}